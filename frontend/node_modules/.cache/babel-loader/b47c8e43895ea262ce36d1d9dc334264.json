{"ast":null,"code":"var _jsxFileName = \"D:\\\\move-forward\\\\react-ukol\\\\frontend\\\\src\\\\components\\\\react-table.js\",\n    _s = $RefreshSig$();\n\nimport React, { cloneElement, useEffect, useState } from 'react';\nimport { useTable } from \"react-table\";\nimport { objectConverter } from '../testScript';\nimport '../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst borderStyle = {};\nconst activeCell = {\n  backgroundColor: '#16DB65'\n};\nexport function ReactTable(jsonArray) {\n  _s();\n\n  // console.log(window.rows)\n  let rowData = window.rows;\n  let columnData = window.columns;\n  let jsonStateArray = jsonArray.jsonArray; // console.log(jsonStateArray);\n  // console.log(arrayToSend);\n  // console.log(rowData)\n  // console.log(window.dataCopy)\n  // console.log(jineObject)\n\n  const [cellData, setCellData] = useState(objectConverter(jsonStateArray));\n  const [value, setValue] = React.useState(0);\n  let jineObject = {};\n\n  for (const key in cellData) {\n    jineObject[key] = 0;\n  }\n\n  console.log(jineObject); // console.log(columnData)\n  // console.log(jsonRows.jsonRows);\n  // console.log(jsonRows.jsonColumns)\n  //e.target.value\n\n  useEffect(() => {\n    console.log(cellData);\n  }, [cellData]);\n\n  const onChange = e => {\n    setValue(e.target.value);\n    console.log(value);\n  };\n\n  const onBlur = (name, columnIndex) => {\n    updateMyData(name, columnIndex, value);\n  };\n\n  const updateMyData = (name, columnIndex, value) => {\n    const togleState = () => setCellData({ ...cellData,\n      [name]: { ...cellData[name],\n        [columnIndex]: { ...cellData[name][columnIndex],\n          value: value\n        }\n      }\n    });\n\n    togleState();\n  };\n\n  function MudaObject(name, columnIndex) {\n    function stateToggle() {\n      return !cellData[name][columnIndex].clicked;\n    }\n\n    const togleState = () => setCellData({ ...cellData,\n      [name]: { ...cellData[name],\n        [columnIndex]: { ...cellData[name][columnIndex],\n          clicked: stateToggle()\n        }\n      }\n    });\n\n    togleState();\n  } // const newData = [];\n  // origData.forEach((actorObj) => {\n  //     actorObj.movies.forEach((movie) => {\n  //         newData.push({\n  //             [\"actor\"]: actorObj.actor,\n  //             movie: movie.namel\n  //         });\n  //     });\n  // });\n\n  /* A function that is called when the user clicks on a cell. It is supposed to change the value of the\r\n  cell. */\n  // const togleState = () => setCellData({\n  //     ...cellData,\n  //     [name]: {\n  //         ...cellData[name],\n  //         [columnIndex]: {\n  //             ...cellData[name][columnIndex],\n  //             value: e.target.value\n  //         }\n  //     }\n  // })\n  // togleState()\n\n\n  let data = React.useMemo(() => rowData, []); // console.log(data);\n\n  const testJson = ['nazev', 'trivialni', 'grafika', 'pokrocile', 'jine'];\n  let testColumns = [];\n  columnData.forEach((element, index) => {\n    let testObj = {\n      Header: element,\n      accessor: element,\n      id: index\n    };\n    testColumns.push(testObj);\n  }); // console.log(testColumns)\n\n  let columns = React.useMemo(() => testColumns, []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  }); // function read(e, index, row) {\n  //     console.log(e);\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n    className: \"table table-bordered table-dark \",\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n        children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n          children: column.render(\"Header\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n      children: rows.map((row, i) => {\n        prepareRow(row);\n        return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n          children: row.cells.map((cell, j) => {\n            if (cell.column.Header == testColumns[0].Header) {\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                rowSpan: cell.rowSpan,\n                ...cell.getCellProps(),\n                children: cell.render(\"Cell\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 41\n              }, this);\n            }\n\n            if (cell.column.Header == 'jine') {\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                rowSpan: cell.rowSpan // onClick={() =>\n                //     MudaObject(row.cells[0].value, cell.column.id)\n                // }\n                ,\n                ...cell.getCellProps(),\n                style: activeCell,\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  style: {\n                    width: '4rem'\n                  },\n                  value: value,\n                  onChange: onChange,\n                  onBlur: () => onBlur(row.cells[0].value, cell.column.id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 193,\n                  columnNumber: 42\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 41\n              }, this);\n            }\n\n            if (cellData[row.cells[0].value][cell.column.id].clicked == true) {} // console.log(cell.column.id, row.cells[0].value)\n            // console.log(cell.column.Header)\n\n\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              rowSpan: cell.rowSpan,\n              onClick: () => MudaObject(row.cells[0].value, cell.column.id),\n              ...cell.getCellProps(),\n              style: cellData[row.cells[0].value][cell.column.id].clicked ? activeCell : borderStyle,\n              children: cell.render(\"Cell\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 37\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ReactTable, \"HlaWR745jNYDBkS3iuVkEblmHdA=\", false, function () {\n  return [useTable];\n});\n\n_c = ReactTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReactTable\");","map":{"version":3,"sources":["D:/move-forward/react-ukol/frontend/src/components/react-table.js"],"names":["React","cloneElement","useEffect","useState","useTable","objectConverter","borderStyle","activeCell","backgroundColor","ReactTable","jsonArray","rowData","window","rows","columnData","columns","jsonStateArray","cellData","setCellData","value","setValue","jineObject","key","console","log","onChange","e","target","onBlur","name","columnIndex","updateMyData","togleState","MudaObject","stateToggle","clicked","data","useMemo","testJson","testColumns","forEach","element","index","testObj","Header","accessor","id","push","getTableProps","getTableBodyProps","headerGroups","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","j","rowSpan","getCellProps","width"],"mappings":"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","sourcesContent":["import React, { cloneElement, useEffect, useState } from 'react';\r\nimport { useTable } from \"react-table\";\r\nimport { objectConverter } from '../testScript';\r\nimport '../index.css';\r\n\r\nconst borderStyle = {\r\n\r\n};\r\nconst activeCell = {\r\n    backgroundColor: '#16DB65'\r\n}\r\n\r\nexport function ReactTable(jsonArray) {\r\n\r\n    // console.log(window.rows)\r\n    let rowData = window.rows\r\n    let columnData = window.columns\r\n    let jsonStateArray = jsonArray.jsonArray\r\n    // console.log(jsonStateArray);\r\n\r\n    // console.log(arrayToSend);\r\n    // console.log(rowData)\r\n    // console.log(window.dataCopy)\r\n\r\n\r\n    // console.log(jineObject)\r\n\r\n    const [cellData, setCellData] = useState(objectConverter(jsonStateArray));\r\n\r\n    const [value, setValue] = React.useState(0);\r\n\r\n\r\n    let jineObject = {}\r\n    for (const key in cellData) {\r\n        jineObject[key] = 0;\r\n\r\n    }\r\n    console.log(jineObject)\r\n    // console.log(columnData)\r\n    // console.log(jsonRows.jsonRows);\r\n    // console.log(jsonRows.jsonColumns)\r\n    //e.target.value\r\n    useEffect(() => {\r\n        console.log(cellData);\r\n    }, [cellData])\r\n\r\n    const onChange = (e) => {\r\n\r\n        setValue(e.target.value);\r\n        console.log(value)\r\n    };\r\n\r\n    const onBlur = (name, columnIndex) => {\r\n\r\n        updateMyData(name, columnIndex, value);\r\n    };\r\n\r\n    const updateMyData = (name, columnIndex, value) => {\r\n\r\n        const togleState = () => setCellData({\r\n            ...cellData,\r\n            [name]: {\r\n                ...cellData[name],\r\n                [columnIndex]: {\r\n                    ...cellData[name][columnIndex],\r\n                    value: value\r\n                }\r\n            }\r\n        })\r\n        togleState()\r\n    }\r\n\r\n    function MudaObject(name, columnIndex) {\r\n\r\n        function stateToggle() {\r\n            return !cellData[name][columnIndex].clicked\r\n        }\r\n\r\n        const togleState = () => setCellData({\r\n            ...cellData,\r\n            [name]: {\r\n                ...cellData[name],\r\n                [columnIndex]: {\r\n                    ...cellData[name][columnIndex],\r\n                    clicked: stateToggle()\r\n                }\r\n            }\r\n        })\r\n        togleState()\r\n    }\r\n    // const newData = [];\r\n    // origData.forEach((actorObj) => {\r\n    //     actorObj.movies.forEach((movie) => {\r\n    //         newData.push({\r\n    //             [\"actor\"]: actorObj.actor,\r\n    //             movie: movie.namel\r\n    //         });\r\n    //     });\r\n    // });\r\n    /* A function that is called when the user clicks on a cell. It is supposed to change the value of the\r\n    cell. */\r\n    // const togleState = () => setCellData({\r\n    //     ...cellData,\r\n    //     [name]: {\r\n    //         ...cellData[name],\r\n    //         [columnIndex]: {\r\n    //             ...cellData[name][columnIndex],\r\n    //             value: e.target.value\r\n    //         }\r\n    //     }\r\n    // })\r\n    // togleState()\r\n\r\n\r\n\r\n    let data = React.useMemo(() => rowData, []);\r\n\r\n    // console.log(data);\r\n\r\n    const testJson = ['nazev', 'trivialni', 'grafika', 'pokrocile', 'jine']\r\n\r\n    let testColumns = []\r\n\r\n    columnData.forEach((element, index) => {\r\n        let testObj = {\r\n            Header: element,\r\n            accessor: element,\r\n            id: index\r\n        }\r\n        testColumns.push(testObj)\r\n    });\r\n\r\n    // console.log(testColumns)\r\n\r\n    let columns = React.useMemo(\r\n        () => testColumns,\r\n        []\r\n    );\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow\r\n    } = useTable({ columns, data });\r\n\r\n    // function read(e, index, row) {\r\n    //     console.log(e);\r\n    // }\r\n    return (\r\n        <table {...getTableProps()} className='table table-bordered table-dark '>\r\n            <thead>\r\n                {headerGroups.map((headerGroup) => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map((column) => (\r\n                            <th {...column.getHeaderProps()} >\r\n                                {column.render(\"Header\")}\r\n                            </th>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n                {rows.map((row, i) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                        <tr {...row.getRowProps()}>\r\n                            {row.cells.map((cell, j) => {\r\n                                if (cell.column.Header == testColumns[0].Header) {\r\n\r\n\r\n                                    return (\r\n                                        <td\r\n                                            rowSpan={cell.rowSpan}\r\n\r\n                                            {...cell.getCellProps()}\r\n\r\n                                        >\r\n                                            {cell.render(\"Cell\")}\r\n                                        </td>\r\n                                    );\r\n                                }\r\n\r\n                                if (cell.column.Header == 'jine') {\r\n                                    return (\r\n                                        <td\r\n                                            rowSpan={cell.rowSpan}\r\n                                            // onClick={() =>\r\n                                            //     MudaObject(row.cells[0].value, cell.column.id)\r\n                                            // }\r\n                                            {...cell.getCellProps()}\r\n                                            style={activeCell}\r\n                                        ><input style={{ width: '4rem' }}\r\n                                            value={value}\r\n                                            onChange={onChange}\r\n                                            onBlur={() =>\r\n                                                onBlur(row.cells[0].value, cell.column.id)\r\n                                            }\r\n                                        >\r\n                                            </input>\r\n                                            {/* {cell.render(\"Cell\")} */}\r\n                                        </td>\r\n                                    );\r\n\r\n                                }\r\n                                if (cellData[row.cells[0].value][cell.column.id].clicked == true) {\r\n\r\n                                }\r\n                                // console.log(cell.column.id, row.cells[0].value)\r\n                                // console.log(cell.column.Header)\r\n                                return (\r\n                                    <td\r\n                                        rowSpan={cell.rowSpan}\r\n\r\n                                        onClick={() =>\r\n                                            MudaObject(row.cells[0].value, cell.column.id)\r\n                                        }\r\n                                        {...cell.getCellProps()}\r\n                                        style={(cellData[row.cells[0].value][cell.column.id].clicked) ? activeCell : borderStyle\r\n                                        }\r\n                                    >\r\n                                        {/* border: \"3px solid #3D348B\", backgroundColor: 'white', color: 'black', cursor: 'pointer' */}\r\n                                        {cell.render(\"Cell\")}\r\n                                    </td>\r\n                                );\r\n                            })}\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}