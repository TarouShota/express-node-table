{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.reactFormatter = exports.isSameObject = exports.isSameArray = exports.clone = void 0;\n\nvar React = require(\"react\");\n\nvar react_dom_1 = require(\"react-dom\");\n\nfunction clone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n\nexports.clone = clone;\n\nfunction isSameArray(a, b) {\n  var i = a && a.length ? a.length : 0;\n\n  if (i !== (b && b.length ? b.length : 0)) {\n    return false;\n  }\n\n  while (i--) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports.isSameArray = isSameArray; // source: https://stackoverflow.com/questions/4816099/chrome-sendrequest-error-typeerror-converting-circular-structure-to-json\n\nfunction stringifyCensor(censor) {\n  var i = 0;\n  return function (key, value) {\n    if (i !== 0 && typeof censor === 'object' && typeof value == 'object' && censor == value) {\n      return '[Circular]';\n    }\n\n    if (i >= 29) {\n      // seems to be a harded maximum of 30 serialized objects?\n      return '[Unknown]';\n    }\n\n    ++i; // so we know we aren't using the original object anymore\n\n    return value;\n  };\n}\n\nfunction isSameObject(a, b) {\n  return JSON.stringify(a, stringifyCensor(a)) === JSON.stringify(b, stringifyCensor(b));\n}\n\nexports.isSameObject = isSameObject;\n\nfunction reactFormatter(JSX) {\n  return function customFormatter(cell, formatterParams, onRendered) {\n    // cell - the cell component\n    // formatterParams - parameters set for the column\n    // onRendered - function to call when the formatter has been rendered\n    var renderFn = function () {\n      var cellEl = cell.getElement();\n\n      if (cellEl) {\n        var formatterCell = cellEl.querySelector('.formatterCell');\n\n        if (formatterCell) {\n          var CompWithMoreProps = React.cloneElement(JSX, {\n            cell: cell\n          });\n          (0, react_dom_1.render)(CompWithMoreProps, cellEl.querySelector('.formatterCell'));\n        }\n      }\n    };\n\n    onRendered(renderFn); // initial render only.\n\n    setTimeout(function () {\n      renderFn(); // render every time cell value changed.\n    }, 0);\n    return '<div class=\"formatterCell\"></div>';\n  };\n}\n\nexports.reactFormatter = reactFormatter;","map":{"version":3,"sources":["D:/move-forward/react-ukol/frontend/node_modules/react-tabulator/lib/Utils.js"],"names":["exports","__esModule","reactFormatter","isSameObject","isSameArray","clone","React","require","react_dom_1","obj","JSON","parse","stringify","a","b","i","length","stringifyCensor","censor","key","value","JSX","customFormatter","cell","formatterParams","onRendered","renderFn","cellEl","getElement","formatterCell","querySelector","CompWithMoreProps","cloneElement","render","setTimeout"],"mappings":"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","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nexports.reactFormatter = exports.isSameObject = exports.isSameArray = exports.clone = void 0;\nvar React = require(\"react\");\nvar react_dom_1 = require(\"react-dom\");\nfunction clone(obj) {\n    return JSON.parse(JSON.stringify(obj));\n}\nexports.clone = clone;\nfunction isSameArray(a, b) {\n    var i = a && a.length ? a.length : 0;\n    if (i !== (b && b.length ? b.length : 0)) {\n        return false;\n    }\n    while (i--) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.isSameArray = isSameArray;\n// source: https://stackoverflow.com/questions/4816099/chrome-sendrequest-error-typeerror-converting-circular-structure-to-json\nfunction stringifyCensor(censor) {\n    var i = 0;\n    return function (key, value) {\n        if (i !== 0 && typeof censor === 'object' && typeof value == 'object' && censor == value) {\n            return '[Circular]';\n        }\n        if (i >= 29) {\n            // seems to be a harded maximum of 30 serialized objects?\n            return '[Unknown]';\n        }\n        ++i; // so we know we aren't using the original object anymore\n        return value;\n    };\n}\nfunction isSameObject(a, b) {\n    return JSON.stringify(a, stringifyCensor(a)) === JSON.stringify(b, stringifyCensor(b));\n}\nexports.isSameObject = isSameObject;\nfunction reactFormatter(JSX) {\n    return function customFormatter(cell, formatterParams, onRendered) {\n        // cell - the cell component\n        // formatterParams - parameters set for the column\n        // onRendered - function to call when the formatter has been rendered\n        var renderFn = function () {\n            var cellEl = cell.getElement();\n            if (cellEl) {\n                var formatterCell = cellEl.querySelector('.formatterCell');\n                if (formatterCell) {\n                    var CompWithMoreProps = React.cloneElement(JSX, { cell: cell });\n                    (0, react_dom_1.render)(CompWithMoreProps, cellEl.querySelector('.formatterCell'));\n                }\n            }\n        };\n        onRendered(renderFn); // initial render only.\n        setTimeout(function () {\n            renderFn(); // render every time cell value changed.\n        }, 0);\n        return '<div class=\"formatterCell\"></div>';\n    };\n}\nexports.reactFormatter = reactFormatter;\n"]},"metadata":{},"sourceType":"script"}