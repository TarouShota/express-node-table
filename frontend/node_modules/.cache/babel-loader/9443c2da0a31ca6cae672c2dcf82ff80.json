{"ast":null,"code":"var _jsxFileName = \"D:\\\\move-forward\\\\react-ukol\\\\frontend\\\\src\\\\components\\\\react-table.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useTable } from \"react-table\";\nimport { objectConverter } from '../testScript';\nimport '../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst borderStyle = {\n  border: \"3px solid #3D348B\"\n};\nconst activeCell = {};\nexport function ReactTable(jsonArray) {\n  _s();\n\n  console.log(window.rows);\n  let rowData = window.rows;\n  let columnData = window.columns;\n  let jsonStateArray = jsonArray.jsonArray;\n  console.log(jsonStateArray); // console.log(arrayToSend);\n\n  console.log(rowData); // console.log(window.dataCopy)\n\n  const [cellData, setCellData] = useState(objectConverter(jsonStateArray)); // console.log(columnData)\n  // console.log(jsonRows.jsonRows);\n  // console.log(jsonRows.jsonColumns)\n\n  useEffect(() => {\n    console.log(cellData);\n  }, [cellData]);\n\n  function MudaObject(name, columnIndex) {\n    function stateToggle() {\n      return !cellData[name][columnIndex].clicked;\n    }\n\n    const togleState = () => setCellData({ ...cellData,\n      [name]: { ...cellData[name],\n        [columnIndex]: { ...cellData[name][columnIndex],\n          clicked: stateToggle()\n        }\n      }\n    });\n\n    togleState();\n  } // const newData = [];\n  // origData.forEach((actorObj) => {\n  //     actorObj.movies.forEach((movie) => {\n  //         newData.push({\n  //             [\"actor\"]: actorObj.actor,\n  //             movie: movie.name\n  //         });\n  //     });\n  // });\n\n\n  let data = React.useMemo(() => rowData, []);\n  console.log(data);\n  const testJson = ['nazev', 'trivialni', 'grafika', 'pokrocile', 'jine'];\n  let testColumns = [];\n  columnData.forEach((element, index) => {\n    let testObj = {\n      Header: element,\n      accessor: element,\n      id: index\n    };\n    testColumns.push(testObj);\n  });\n  let columns = React.useMemo(() => testColumns, []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  }); // function read(e, index, row) {\n  //     console.log(e);\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n    className: \"table table-bordered table-dark\",\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n        children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n          style: borderStyle,\n          children: column.render(\"Header\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n      children: rows.map((row, i) => {\n        prepareRow(row);\n        return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n          children: row.cells.map((cell, j) => {\n            if (cell.column.Header == 'jine') {\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                rowSpan: cell.rowSpan,\n                onClick: () => console.log(cell.column.id, row.cells[0].value),\n                ...cell.getCellProps(),\n                style: borderStyle,\n                children: cell.render(\"Cell\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 41\n              }, this);\n            } // console.log(cell.column.Header)\n\n\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              rowSpan: cell.rowSpan,\n              onClick: () => console.log(cell.column.id, row.cells[0].value),\n              ...cell.getCellProps(),\n              style: {\n                border: \"3px solid #3D348B\",\n                backgroundColor: 'white',\n                color: 'black'\n              },\n              children: cell.render(\"Cell\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 37\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ReactTable, \"9tB5kLz5DNJfhFyUjLQmxzQmsrY=\", false, function () {\n  return [useTable];\n});\n\n_c = ReactTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReactTable\");","map":{"version":3,"sources":["D:/move-forward/react-ukol/frontend/src/components/react-table.js"],"names":["React","useEffect","useState","useTable","objectConverter","borderStyle","border","activeCell","ReactTable","jsonArray","console","log","window","rows","rowData","columnData","columns","jsonStateArray","cellData","setCellData","MudaObject","name","columnIndex","stateToggle","clicked","togleState","data","useMemo","testJson","testColumns","forEach","element","index","testObj","Header","accessor","id","push","getTableProps","getTableBodyProps","headerGroups","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","j","rowSpan","value","getCellProps","backgroundColor","color"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useTable } from \"react-table\";\r\nimport { objectConverter } from '../testScript';\r\nimport '../index.css';\r\n\r\nconst borderStyle = {\r\n    border: \"3px solid #3D348B\"\r\n};\r\nconst activeCell = {\r\n\r\n}\r\n\r\nexport function ReactTable(jsonArray) {\r\n\r\n    console.log(window.rows)\r\n    let rowData = window.rows\r\n    let columnData = window.columns\r\n    let jsonStateArray = jsonArray.jsonArray\r\n    console.log(jsonStateArray);\r\n\r\n    // console.log(arrayToSend);\r\n    console.log(rowData)\r\n    // console.log(window.dataCopy)\r\n\r\n    const [cellData, setCellData] = useState(objectConverter(jsonStateArray));\r\n\r\n    // console.log(columnData)\r\n    // console.log(jsonRows.jsonRows);\r\n    // console.log(jsonRows.jsonColumns)\r\n\r\n    useEffect(() => {\r\n        console.log(cellData);\r\n    }, [cellData])\r\n\r\n    function MudaObject(name, columnIndex) {\r\n\r\n        function stateToggle() {\r\n            return !cellData[name][columnIndex].clicked\r\n        }\r\n\r\n        const togleState = () => setCellData({\r\n            ...cellData,\r\n            [name]: {\r\n                ...cellData[name],\r\n                [columnIndex]: {\r\n                    ...cellData[name][columnIndex],\r\n                    clicked: stateToggle()\r\n                }\r\n            }\r\n        })\r\n        togleState()\r\n    }\r\n    // const newData = [];\r\n    // origData.forEach((actorObj) => {\r\n    //     actorObj.movies.forEach((movie) => {\r\n    //         newData.push({\r\n    //             [\"actor\"]: actorObj.actor,\r\n    //             movie: movie.name\r\n    //         });\r\n    //     });\r\n    // });\r\n\r\n\r\n\r\n    let data = React.useMemo(() => rowData, []);\r\n\r\n    console.log(data);\r\n\r\n    const testJson = ['nazev', 'trivialni', 'grafika', 'pokrocile', 'jine']\r\n\r\n    let testColumns = []\r\n    columnData.forEach((element, index) => {\r\n        let testObj = {\r\n            Header: element,\r\n            accessor: element,\r\n            id: index\r\n        }\r\n        testColumns.push(testObj)\r\n    });\r\n\r\n    let columns = React.useMemo(\r\n        () => testColumns,\r\n        []\r\n    );\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow\r\n    } = useTable({ columns, data });\r\n\r\n    // function read(e, index, row) {\r\n    //     console.log(e);\r\n    // }\r\n    return (\r\n        <table {...getTableProps()} className='table table-bordered table-dark'>\r\n            <thead>\r\n                {headerGroups.map((headerGroup) => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map((column) => (\r\n                            <th {...column.getHeaderProps()} style={borderStyle}>\r\n                                {column.render(\"Header\")}\r\n                            </th>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n                {rows.map((row, i) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                        <tr {...row.getRowProps()}>\r\n                            {row.cells.map((cell, j) => {\r\n                                if (cell.column.Header == 'jine') {\r\n                                    return (\r\n                                        <td\r\n                                            rowSpan={cell.rowSpan}\r\n                                            onClick={() =>\r\n                                                console.log(cell.column.id, row.cells[0].value)\r\n                                            }\r\n                                            {...cell.getCellProps()}\r\n                                            style={borderStyle}\r\n                                        >\r\n                                            {cell.render(\"Cell\")}\r\n                                        </td>\r\n                                    );\r\n                                }\r\n                                // console.log(cell.column.Header)\r\n                                return (\r\n                                    <td\r\n                                        rowSpan={cell.rowSpan}\r\n                                        onClick={() =>\r\n                                            console.log(cell.column.id, row.cells[0].value)\r\n                                        }\r\n                                        {...cell.getCellProps()}\r\n                                        style={{ border: \"3px solid #3D348B\", backgroundColor: 'white', color: 'black' }}\r\n                                    >\r\n                                        {cell.render(\"Cell\")}\r\n                                    </td>\r\n                                );\r\n                            })}\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}