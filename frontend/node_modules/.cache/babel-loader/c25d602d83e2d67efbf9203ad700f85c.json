{"ast":null,"code":"var _jsxFileName = \"D:\\\\move-forward\\\\react-ukol\\\\frontend\\\\src\\\\jstable.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react'; // import './App.css'\n\nimport 'react-tabulator/lib/styles.css';\nimport { ReactTabulator } from 'react-tabulator';\nimport { Tabulator } from 'tabulator-tables';\nimport { ReactTable } from './components/react-table';\nimport { useTable } from 'react-table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ReadCsv() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [tableRows, setTableRows] = useState([]); //State to store the values\n\n  const [values, setValues] = useState([]);\n  let file = null;\n\n  function fileInput(e) {\n    file = e.target.files[0]; // console.log(e.target.files[0]);\n  }\n\n  function submitFile() {\n    let formData = new FormData();\n    formData.append('file', file);\n\n    const fetchItems = async () => fetch(\"/api/tweets\", {\n      // mode: 'no-cors',\n      method: 'POST',\n      body: formData\n    }).then(response => response.json()).then(_ref => {\n      let {\n        data\n      } = _ref;\n\n      if (data.length) {\n        data.forEach((element, index) => {\n          if (index == 0) {\n            return;\n          }\n\n          console.log(element);\n        });\n        console.log(data[1], data);\n        data[0].push(\"jine\");\n        data.forEach((element, index) => {\n          if (index == 0) {\n            return;\n          }\n\n          element.push(\"0\");\n        });\n        let allArrays = data.slice(1, data.length);\n        setTableRows(data[0]);\n        setValues(allArrays);\n        console.log(tableRows);\n        console.log(values);\n        const columns = data[0];\n        /* Converting the array of arrays into an array of objects. */\n\n        window.rows = data.splice(1).map(arr => {\n          const obj = {};\n          columns.forEach((column, index) => {\n            obj[column] = arr[index];\n          });\n          return obj;\n        });\n        /* Adding a new property to each object in the array. */\n\n        window.rows.forEach(element => {\n          element.jine = \"0\";\n        });\n        console.log(window.rows);\n      } else {\n        alert('The CSV is empty');\n      }\n    }).catch(e => alert(e.message));\n\n    fetchItems();\n  }\n\n  const borderStyle = {\n    border: \"1px dashed navy\"\n  };\n\n  function ReactTable() {\n    _s();\n\n    const origData = [{\n      actor: \"Johnny Depp\",\n      movies: [{\n        name: \"Pirates of the Carribean 1\"\n      }, {\n        name: \"Pirates of the Carribean 2\"\n      }, {\n        name: \"Pirates of the Carribean 3\"\n      }, {\n        name: \"Pirates of the Carribean 4\"\n      }]\n    }];\n    const newData = [];\n    origData.forEach(actorObj => {\n      actorObj.movies.forEach(movie => {\n        newData.push({\n          [\"ac tor\"]: actorObj.actor,\n          movie: movie.name\n        });\n      });\n    });\n    const data = React.useMemo(() => newData, []);\n    console.log(newData);\n    const columns = React.useMemo(() => [{\n      Header: \"Actor\",\n      accessor: \"actor\",\n      id: \"0\"\n    }, {\n      Header: \"Movies\",\n      accessor: \"movie\",\n      id: \"1\"\n    }], []);\n    const {\n      getTableProps,\n      getTableBodyProps,\n      headerGroups,\n      rows,\n      prepareRow\n    } = useTable({\n      columns,\n      data\n    });\n\n    function read(e, index, row) {\n      console.log(e);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n            style: borderStyle,\n            children: column.render(\"Header\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: rows.map((row, i) => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n            children: row.cells.map((cell, j) => {\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                rowSpan: cell.rowSpan,\n                onClick: () => console.log(cell.column.id, row.cells[0].value),\n                ...cell.getCellProps(),\n                style: borderStyle,\n                children: cell.render(\"Cell\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 41\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this);\n  }\n\n  _s(ReactTable, \"0PoJkgeqDYUkd9wTRNDxqISfUQ4=\", false, function () {\n    return [useTable];\n  });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container py-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Nahr\\xE1t CSV\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"file\",\n      children: \"Vyberte file\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      className: \"form-control\",\n      name: \"file\",\n      id: \"file\",\n      onChange: fileInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn primary mt-2\",\n      id: \"submitFile\",\n      onClick: submitFile,\n      children: \"Read\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReactTable, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 9\n  }, this);\n} // const data = require(\"./data\");\n// function CreateTable() {\n//     return (\n//         <table className='table table-bordered table-dark'>\n//             <thead>\n//                 <tr>\n//                     {tableRows.map((rows, index) => {\n//                         return <th key={index}>{rows}</th>;\n//                     })}\n//                 </tr>\n//             </thead>\n//             <tbody>\n//                 {values.map((value, index) => {\n//                     return (\n//                         <tr key={index}>\n//                             {value.map((val, i) => {\n//                                 return <td onClick={tableClick} key={i}>{val}</td>;\n//                             })}\n//                         </tr>\n//                     );\n//                 })}\n//             </tbody>\n//         </table>\n//     )\n// }\n// function tableClick(e) {\n//     console.log(e)\n//     console.log(e.target.innerText)\n//     console.log()\n// }\n\n_s2(ReadCsv, \"5+hszGc+ZlOFOn2QYghaI73Rmz8=\");\n\n_c = ReadCsv;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadCsv\");","map":{"version":3,"sources":["D:/move-forward/react-ukol/frontend/src/jstable.js"],"names":["React","useEffect","useState","ReactTabulator","Tabulator","ReactTable","useTable","ReadCsv","tableRows","setTableRows","values","setValues","file","fileInput","e","target","files","submitFile","formData","FormData","append","fetchItems","fetch","method","body","then","response","json","data","length","forEach","element","index","console","log","push","allArrays","slice","columns","window","rows","splice","map","arr","obj","column","jine","alert","catch","message","borderStyle","border","origData","actor","movies","name","newData","actorObj","movie","useMemo","Header","accessor","id","getTableProps","getTableBodyProps","headerGroups","prepareRow","read","row","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","i","getRowProps","cells","cell","j","rowSpan","value","getCellProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\n// import './App.css'\r\nimport 'react-tabulator/lib/styles.css';\r\nimport { ReactTabulator } from 'react-tabulator'\r\nimport { Tabulator } from 'tabulator-tables';\r\nimport { ReactTable } from './components/react-table';\r\nimport { useTable } from 'react-table'\r\n\r\n\r\nexport function ReadCsv() {\r\n    const [tableRows, setTableRows] = useState([]);\r\n\r\n    //State to store the values\r\n    const [values, setValues] = useState([]);\r\n\r\n\r\n\r\n    let file = null;\r\n    function fileInput(e) {\r\n        file = e.target.files[0]\r\n        // console.log(e.target.files[0]);\r\n    }\r\n    function submitFile() {\r\n\r\n        let formData = new FormData()\r\n        formData.append('file', file);\r\n\r\n        const fetchItems = async () => fetch(\"/api/tweets\", {\r\n            // mode: 'no-cors',\r\n            method: 'POST',\r\n            body: formData\r\n        })\r\n            .then((response) => response.json())\r\n            .then(({ data }) => {\r\n                if (data.length) {\r\n                    data.forEach((element, index) => {\r\n                        if (index == 0) {\r\n                            return\r\n                        } console.log(element);\r\n                    })\r\n                    console.log(data[1], data);\r\n                    data[0].push(\"jine\");\r\n\r\n                    data.forEach((element, index) => {\r\n                        if (index == 0) {\r\n                            return\r\n                        }\r\n                        element.push(\"0\")\r\n                    })\r\n\r\n                    let allArrays = data.slice(1, data.length);\r\n\r\n                    setTableRows(data[0]);\r\n                    setValues(allArrays);\r\n\r\n                    console.log(tableRows);\r\n                    console.log(values)\r\n                    const columns = data[0]\r\n                    /* Converting the array of arrays into an array of objects. */\r\n                    window.rows = data.splice(1).map((arr) => {\r\n\r\n                        const obj = {}\r\n                        columns.forEach((column, index) => {\r\n                            obj[column] = arr[index]\r\n                        })\r\n                        return obj\r\n                    })\r\n\r\n                    /* Adding a new property to each object in the array. */\r\n                    window.rows.forEach(element => {\r\n                        element.jine = \"0\"\r\n                    });\r\n                    console.log(window.rows);\r\n\r\n                } else {\r\n                    alert('The CSV is empty')\r\n                }\r\n            })\r\n            .catch((e) => alert(e.message))\r\n        fetchItems()\r\n    }\r\n\r\n\r\n    const borderStyle = {\r\n        border: \"1px dashed navy\"\r\n    };\r\n\r\n    function ReactTable() {\r\n        const origData = [\r\n            {\r\n                actor: \"Johnny Depp\",\r\n                movies: [\r\n                    {\r\n                        name: \"Pirates of the Carribean 1\"\r\n                    },\r\n                    {\r\n                        name: \"Pirates of the Carribean 2\"\r\n                    },\r\n                    {\r\n                        name: \"Pirates of the Carribean 3\"\r\n                    },\r\n                    {\r\n                        name: \"Pirates of the Carribean 4\"\r\n                    }\r\n                ]\r\n            }\r\n        ];\r\n        const newData = [];\r\n        origData.forEach((actorObj) => {\r\n            actorObj.movies.forEach((movie) => {\r\n                newData.push({\r\n                    [\"ac tor\"]: actorObj.actor,\r\n                    movie: movie.name\r\n                });\r\n            });\r\n        });\r\n        const data = React.useMemo(() => newData, []);\r\n        console.log(newData);\r\n        const columns = React.useMemo(\r\n            () => [\r\n                {\r\n                    Header: \"Actor\",\r\n                    accessor: \"actor\",\r\n                    id: \"0\"\r\n                },\r\n                {\r\n                    Header: \"Movies\",\r\n                    accessor: \"movie\",\r\n                    id: \"1\"\r\n                }\r\n            ],\r\n            []\r\n        );\r\n        const {\r\n            getTableProps,\r\n            getTableBodyProps,\r\n            headerGroups,\r\n            rows,\r\n            prepareRow\r\n        } = useTable({ columns, data });\r\n\r\n        function read(e, index, row) {\r\n            console.log(e);\r\n        }\r\n        return (\r\n            <table {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map((headerGroup) => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map((column) => (\r\n                                <th {...column.getHeaderProps()} style={borderStyle}>\r\n                                    {column.render(\"Header\")}\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map((row, i) => {\r\n                        prepareRow(row);\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map((cell, j) => {\r\n                                    return (\r\n                                        <td\r\n                                            rowSpan={cell.rowSpan}\r\n                                            onClick={() =>\r\n                                                console.log(cell.column.id, row.cells[0].value)\r\n                                            }\r\n                                            {...cell.getCellProps()}\r\n                                            style={borderStyle}\r\n                                        >\r\n                                            {cell.render(\"Cell\")}\r\n                                        </td>\r\n                                    );\r\n                                })}\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"container py-4\">\r\n            <h1>Nahrát CSV</h1>\r\n            <label htmlFor='file'>Vyberte file</label>\r\n            <input type='file' className=\"form-control\" name='file' id='file' onChange={fileInput} />\r\n            <button className=\"btn btn primary mt-2\" id=\"submitFile\" onClick={submitFile}>Read</button>\r\n            {/* <div className=\"mt-2\" id=\"csvTable\"></div> */}\r\n            <ReactTable />\r\n            {/* <h1>{tableRows} and {values}</h1> */}\r\n            {/* <CreateTable /> */}\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n    // const data = require(\"./data\");\r\n\r\n\r\n    // function CreateTable() {\r\n    //     return (\r\n    //         <table className='table table-bordered table-dark'>\r\n    //             <thead>\r\n    //                 <tr>\r\n    //                     {tableRows.map((rows, index) => {\r\n    //                         return <th key={index}>{rows}</th>;\r\n    //                     })}\r\n    //                 </tr>\r\n    //             </thead>\r\n    //             <tbody>\r\n    //                 {values.map((value, index) => {\r\n    //                     return (\r\n    //                         <tr key={index}>\r\n    //                             {value.map((val, i) => {\r\n    //                                 return <td onClick={tableClick} key={i}>{val}</td>;\r\n    //                             })}\r\n\r\n    //                         </tr>\r\n    //                     );\r\n    //                 })}\r\n    //             </tbody>\r\n    //         </table>\r\n    //     )\r\n    // }\r\n\r\n    // function tableClick(e) {\r\n    //     console.log(e)\r\n    //     console.log(e.target.innerText)\r\n    //     console.log()\r\n    // }\r\n\r\n"]},"metadata":{},"sourceType":"module"}