{"ast":null,"code":"var _jsxFileName = \"D:\\\\move-forward\\\\react-ukol\\\\frontend\\\\src\\\\jstable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react'; // import './App.css'\n\nimport 'react-tabulator/lib/styles.css';\nimport { ReactTabulator } from 'react-tabulator';\nimport { Tabulator } from 'tabulator-tables';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ReadCsv() {\n  _s();\n\n  const [tableRows, setTableRows] = useState([]); //State to store the values\n\n  const [values, setValues] = useState([]);\n  let file = null;\n\n  function fileInput(e) {\n    file = e.target.files[0]; // console.log(e.target.files[0]);\n  }\n\n  function submitFile() {\n    let formData = new FormData();\n    formData.append('file', file);\n\n    const fetchItems = async () => fetch(\"/api/tweets\", {\n      // mode: 'no-cors',\n      method: 'POST',\n      body: formData\n    }).then(response => response.json()).then(_ref => {\n      let {\n        data\n      } = _ref;\n\n      if (data.length) {\n        console.log(data[1], data);\n        data[0].push(\"jine\");\n        data.forEach((element, index) => {\n          if (index == 0) {\n            return;\n          }\n\n          element.push(\"0\");\n        });\n        let allArrays = data.slice(1, data.length);\n        setTableRows(data[0]);\n        setValues(allArrays);\n        console.log(tableRows);\n        console.log(values);\n        const columns = data[0];\n        /* Converting the array of arrays into an array of objects. */\n\n        window.rows = data.splice(1).map(arr => {\n          const obj = {};\n          columns.forEach((column, index) => {\n            obj[column] = arr[index];\n          });\n          return obj;\n        });\n        /* Adding a new property to each object in the array. */\n\n        window.rows.forEach(element => {\n          element.jine = \"0\";\n        });\n        console.log(window.rows); // console.log(rows, columns)\n\n        const table = new Tabulator(\"#csvTable\", {\n          height: \"300px\",\n          data: window.rows,\n          autoColumns: true\n        });\n      } else {\n        alert('The CSV is empty');\n      }\n    }).catch(e => alert(e.message));\n\n    fetchItems();\n  }\n\n  function tableClick(e) {\n    console.log(e);\n    console.log(e.target.innerText);\n    console.log();\n  } // const data = require(\"./data\");\n\n\n  function CreateTable() {\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-bordered table-dark\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: tableRows.map((rows, index) => {\n            return /*#__PURE__*/_jsxDEV(\"th\", {\n              children: rows\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 36\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: values.map((value, index) => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: value.map((val, i) => {\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                onClick: tableClick,\n                children: val\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 44\n              }, this);\n            })\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container py-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Nahr\\xE1t CSV\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"file\",\n      children: \"Vyberte file\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      className: \"form-control\",\n      name: \"file\",\n      id: \"file\",\n      onChange: fileInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn primary mt-2\",\n      id: \"submitFile\",\n      onClick: submitFile,\n      children: \"Read\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-2\",\n      id: \"csvTable\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CreateTable, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ReadCsv, \"5+hszGc+ZlOFOn2QYghaI73Rmz8=\");\n\n_c = ReadCsv;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadCsv\");","map":{"version":3,"sources":["D:/move-forward/react-ukol/frontend/src/jstable.js"],"names":["React","useEffect","useState","ReactTabulator","Tabulator","ReadCsv","tableRows","setTableRows","values","setValues","file","fileInput","e","target","files","submitFile","formData","FormData","append","fetchItems","fetch","method","body","then","response","json","data","length","console","log","push","forEach","element","index","allArrays","slice","columns","window","rows","splice","map","arr","obj","column","jine","table","height","autoColumns","alert","catch","message","tableClick","innerText","CreateTable","value","val","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\n// import './App.css'\r\nimport 'react-tabulator/lib/styles.css';\r\nimport { ReactTabulator } from 'react-tabulator'\r\nimport { Tabulator } from 'tabulator-tables';\r\n\r\n\r\nexport function ReadCsv() {\r\n    const [tableRows, setTableRows] = useState([]);\r\n\r\n    //State to store the values\r\n    const [values, setValues] = useState([]);\r\n\r\n\r\n\r\n    let file = null;\r\n    function fileInput(e) {\r\n        file = e.target.files[0]\r\n        // console.log(e.target.files[0]);\r\n    }\r\n    function submitFile() {\r\n\r\n        let formData = new FormData()\r\n        formData.append('file', file);\r\n\r\n        const fetchItems = async () => fetch(\"/api/tweets\", {\r\n            // mode: 'no-cors',\r\n            method: 'POST',\r\n            body: formData\r\n        })\r\n            .then((response) => response.json())\r\n            .then(({ data }) => {\r\n                if (data.length) {\r\n\r\n                    console.log(data[1], data);\r\n                    data[0].push(\"jine\");\r\n\r\n                    data.forEach((element, index) => {\r\n                        if (index == 0) {\r\n                            return\r\n                        }\r\n                        element.push(\"0\")\r\n                    })\r\n\r\n                    let allArrays = data.slice(1, data.length);\r\n\r\n                    setTableRows(data[0]);\r\n                    setValues(allArrays);\r\n\r\n                    console.log(tableRows);\r\n                    console.log(values)\r\n                    const columns = data[0]\r\n                    /* Converting the array of arrays into an array of objects. */\r\n                    window.rows = data.splice(1).map((arr) => {\r\n\r\n                        const obj = {}\r\n                        columns.forEach((column, index) => {\r\n                            obj[column] = arr[index]\r\n                        })\r\n                        return obj\r\n                    })\r\n\r\n                    /* Adding a new property to each object in the array. */\r\n                    window.rows.forEach(element => {\r\n                        element.jine = \"0\"\r\n                    });\r\n                    console.log(window.rows);\r\n\r\n                    // console.log(rows, columns)\r\n\r\n                    const table = new Tabulator(\"#csvTable\", {\r\n                        height: \"300px\",\r\n                        data: window.rows,\r\n                        autoColumns: true\r\n                    });\r\n                } else {\r\n                    alert('The CSV is empty')\r\n                }\r\n            })\r\n            .catch((e) => alert(e.message))\r\n        fetchItems()\r\n    }\r\n    function tableClick(e) {\r\n        console.log(e)\r\n        console.log(e.target.innerText)\r\n        console.log()\r\n    }\r\n\r\n\r\n    // const data = require(\"./data\");\r\n\r\n\r\n    function CreateTable() {\r\n        return (\r\n            <table className='table table-bordered table-dark'>\r\n                <thead>\r\n                    <tr>\r\n                        {tableRows.map((rows, index) => {\r\n                            return <th key={index}>{rows}</th>;\r\n                        })}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {values.map((value, index) => {\r\n                        return (\r\n                            <tr key={index}>\r\n                                {value.map((val, i) => {\r\n                                    return <td onClick={tableClick} key={i}>{val}</td>;\r\n                                })}\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"container py-4\">\r\n            <h1>Nahrát CSV</h1>\r\n            <label htmlFor='file'>Vyberte file</label>\r\n            <input type='file' className=\"form-control\" name='file' id='file' onChange={fileInput} />\r\n            <button className=\"btn btn primary mt-2\" id=\"submitFile\" onClick={submitFile}>Read</button>\r\n            <div className=\"mt-2\" id=\"csvTable\"></div>\r\n\r\n            {/* <h1>{tableRows} and {values}</h1> */}\r\n            <CreateTable />\r\n\r\n        </div>\r\n\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}