{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\nconst {\n  Children\n} = require(\"react\");\n\nconst {\n  ColumnCalcsModule\n} = require(\"tabulator-tables\"); // // import './App.css'\n// import 'react-tabulator/lib/styles.css';\n// import { ReactTabulator } from 'react-tabulator'\n// import { Tabulator } from 'tabulator-tables';\n// function submitFile() {\n//     let formData = new FormData()\n//     formData.append('file', file);\n//     const fetchItems = async () => fetch(\"/api/tweets\", {\n//         // mode: 'no-cors',\n//         method: 'POST',\n//         body: formData\n//     })\n//         .then((response) => response.json())\n//         .then(({ data }) => {\n//             if (data.length) {\n//                 return data\n//                 console.log(data[1], data);\n//                 data[0].push(\"jine\");\n//                 data.forEach((element, index) => {\n//                     if (index == 0) {\n//                         return\n//                     }\n//                     element.push(\"0\")\n//                 })\n//                 let allArrays = data.slice(1, data.length);\n//                 setTableRows(data[0]);\n//                 setValues(allArrays);\n//                 console.log(tableRows);\n//                 console.log(values)\n//                 const columns = data[0]\n//                 /* Converting the array of arrays into an array of objects. */\n//                 rows = data.splice(1).map((arr) => {\n//                     const stateObject = {}\n//                     columns.forEach((column, index) => {\n//                         stateObject[column] = arr[index]\n//                     })\n//                     return stateObject\n//                 })\n//                 /* Adding a new property to each object in the array. */\n//                 rows.forEach(element => {\n//                     element.jine = \"0\"\n//                 });\n//                 console.log(rows);\n//                 // console.log(rows, columns)\n//                 const table = new Tabulator(\"#csvTable\", {\n//                     height: \"300px\",\n//                     data: rows,\n//                     autoColumns: true\n//                 });\n//             } else {\n//                 alert('The CSV is empty')\n//             }\n//         })\n//         .catch((e) => alert(e.message))\n//     return fetchItems()\n// }\n\n\nlet testArray = [[\"first\", \"1\", \"5\", \"10\", \"0\"], [\"second\", \"3\", \"7\", \"12\", \"0\"], [\"third\", \"5\", \"9\", \"14\", \"0\"], [\"fourth\", \"4\", \"8\", \"13\", \"0\"]]; //'second', \"3\", \"7\", \"12\",\"0\"\n// , [\"third\", \"5\", \"9\", \"14\",\"0\"]\n\nlet childObj = {};\n\nfunction objectConverter(jsonArray) {\n  if (jsonArray == undefined) {\n    return;\n  }\n\n  let stateObject = {};\n  jsonArray.forEach((element, index) => {\n    // console.log(element[0])\n    // console.log(element[index]);\n    // console.log(stateObject[`${element[index]}`])\n    element.forEach((e, childIndex) => {\n      if (childIndex === 0) {\n        return stateObject[`${element[0]}`] = {};\n      }\n\n      if (e == \"0\") {\n        Object.assign(childObj, {\n          [childIndex]: {\n            clicked: true,\n            value: e\n          }\n        });\n      } else {\n        Object.assign(childObj, {\n          [childIndex]: {\n            clicked: true,\n            value: e\n          }\n        });\n      } // console.log(e);\n\n    });\n    Object.assign(stateObject[`${element[0]}`], childObj);\n  });\n  return stateObject;\n}\n\nlet finalTestArray = objectConverter(testArray);\nconsole.log(finalTestArray);\nconsole.log(`'${testArray[0][0]}' 2`);\nconst check = `${testArray[0][0]}`;\nconsole.log(typeof check);\nconsole.log(finalTestArray.first[1]);\nlet finalObj = {};\nlet finalJson = []; // function calculateHours(testingObject) {\n//     for (const key in testingObject) {\n//         // key\n//         console.log(key)\n//         for (const childKey in key) {\n//             if (childKey == 0) {\n//                 continue\n//             }\n//             console.log(childKey)\n//             if (1 == 1) {\n//                 finalObj.key =\n//                 // finalObj['first'] = testingObject['1'].value\n//             }\n//         }\n//     }\n//     return finalObj\n// }\n// console.log(calculateHours(finalTestArray));\n\n/* Accessing the object and changing the value of the clicked property. */\n// console.log(stateObject['fi rst'][2].value)\n// stateObject.first[1].clicked = true\n// console.log(stateObject.first)\n// console.log(stateObject.first[1]);\n// const newObj = {\n//     :0,\n//     second:1\n// }\n// const testJson = ['nazev', 'trivialni', 'grafika', 'pokrocile', 'jine']\n// let testColumnData = []\n// testJson.forEach((element, index) => {\n//     let testObj = {\n//         Header: element,\n//         accessor: element,\n//         id: index\n//     }\n//     testColumnData.push(testObj)\n// });\n// console.log(testColumnData);\n// let columns = [\n//     {\n//         Header: \"nazev\",\n//         accessor: \"nazev\",\n//         id: \"0\"\n//     },\n//     {\n//         Header: \"trivialni\",\n//         accessor: \"trivialni\",\n//         id: \"1\"\n//     }\n// ]\n// console.log(columns);","map":{"version":3,"sources":["D:/move-forward/react-ukol/frontend/src/testScript.js"],"names":["Children","require","ColumnCalcsModule","testArray","childObj","objectConverter","jsonArray","undefined","stateObject","forEach","element","index","e","childIndex","Object","assign","clicked","value","finalTestArray","console","log","check","first","finalObj","finalJson"],"mappings":"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","sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n\r\nconst { Children } = require(\"react\");\r\nconst { ColumnCalcsModule } = require(\"tabulator-tables\");\r\n\r\n// // import './App.css'\r\n// import 'react-tabulator/lib/styles.css';\r\n// import { ReactTabulator } from 'react-tabulator'\r\n// import { Tabulator } from 'tabulator-tables';\r\n// function submitFile() {\r\n\r\n//     let formData = new FormData()\r\n//     formData.append('file', file);\r\n\r\n//     const fetchItems = async () => fetch(\"/api/tweets\", {\r\n//         // mode: 'no-cors',\r\n//         method: 'POST',\r\n//         body: formData\r\n//     })\r\n//         .then((response) => response.json())\r\n//         .then(({ data }) => {\r\n//             if (data.length) {\r\n//                 return data\r\n//                 console.log(data[1], data);\r\n//                 data[0].push(\"jine\");\r\n\r\n//                 data.forEach((element, index) => {\r\n//                     if (index == 0) {\r\n//                         return\r\n//                     }\r\n//                     element.push(\"0\")\r\n//                 })\r\n\r\n//                 let allArrays = data.slice(1, data.length);\r\n\r\n//                 setTableRows(data[0]);\r\n//                 setValues(allArrays);\r\n\r\n//                 console.log(tableRows);\r\n//                 console.log(values)\r\n//                 const columns = data[0]\r\n//                 /* Converting the array of arrays into an array of objects. */\r\n//                 rows = data.splice(1).map((arr) => {\r\n\r\n//                     const stateObject = {}\r\n//                     columns.forEach((column, index) => {\r\n//                         stateObject[column] = arr[index]\r\n//                     })\r\n//                     return stateObject\r\n//                 })\r\n\r\n//                 /* Adding a new property to each object in the array. */\r\n//                 rows.forEach(element => {\r\n//                     element.jine = \"0\"\r\n//                 });\r\n//                 console.log(rows);\r\n\r\n//                 // console.log(rows, columns)\r\n\r\n//                 const table = new Tabulator(\"#csvTable\", {\r\n//                     height: \"300px\",\r\n//                     data: rows,\r\n//                     autoColumns: true\r\n//                 });\r\n//             } else {\r\n//                 alert('The CSV is empty')\r\n//             }\r\n//         })\r\n//         .catch((e) => alert(e.message))\r\n//     return fetchItems()\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet testArray = [[\"first\", \"1\", \"5\", \"10\", \"0\"], [\"second\", \"3\", \"7\", \"12\", \"0\"], [\"third\", \"5\", \"9\", \"14\", \"0\"], [\"fourth\", \"4\", \"8\", \"13\", \"0\"]]\r\n//'second', \"3\", \"7\", \"12\",\"0\"\r\n// , [\"third\", \"5\", \"9\", \"14\",\"0\"]\r\n\r\nlet childObj = {}\r\n\r\nfunction objectConverter(jsonArray) {\r\n    if (jsonArray == undefined) {\r\n        return\r\n    }\r\n\r\n    let stateObject = {}\r\n    jsonArray.forEach((element, index) => {\r\n        // console.log(element[0])\r\n        // console.log(element[index]);\r\n\r\n\r\n        // console.log(stateObject[`${element[index]}`])\r\n        element.forEach((e, childIndex) => {\r\n            if (childIndex === 0) {\r\n                return stateObject[`${element[0]}`] = {}\r\n            }\r\n            if (e == \"0\") {\r\n                Object.assign(childObj, {\r\n                    [childIndex]: {\r\n                        clicked: true,\r\n                        value: e\r\n\r\n                    }\r\n                })\r\n            } else {\r\n                Object.assign(childObj, {\r\n                    [childIndex]: {\r\n                        clicked: true,\r\n                        value: e\r\n\r\n                    }\r\n                })\r\n            }\r\n\r\n            // console.log(e);\r\n\r\n        });\r\n        Object.assign(stateObject[`${element[0]}`], childObj);\r\n\r\n    });\r\n    return stateObject\r\n}\r\n\r\nlet finalTestArray = (objectConverter(testArray))\r\nconsole.log(finalTestArray)\r\n\r\n\r\nconsole.log(`'${testArray[0][0]}' 2`);\r\nconst check = (`${testArray[0][0]}`)\r\nconsole.log(typeof (check))\r\nconsole.log(finalTestArray.first[1])\r\n\r\nlet finalObj = {}\r\nlet finalJson = [];\r\n\r\n// function calculateHours(testingObject) {\r\n\r\n//     for (const key in testingObject) {\r\n//         // key\r\n//         console.log(key)\r\n//         for (const childKey in key) {\r\n//             if (childKey == 0) {\r\n//                 continue\r\n//             }\r\n//             console.log(childKey)\r\n//             if (1 == 1) {\r\n//                 finalObj.key =\r\n//                 // finalObj['first'] = testingObject['1'].value\r\n//             }\r\n//         }\r\n\r\n//     }\r\n//     return finalObj\r\n\r\n// }\r\n// console.log(calculateHours(finalTestArray));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* Accessing the object and changing the value of the clicked property. */\r\n// console.log(stateObject['fi rst'][2].value)\r\n// stateObject.first[1].clicked = true\r\n// console.log(stateObject.first)\r\n// console.log(stateObject.first[1]);\r\n\r\n// const newObj = {\r\n//     :0,\r\n//     second:1\r\n// }\r\n// const testJson = ['nazev', 'trivialni', 'grafika', 'pokrocile', 'jine']\r\n\r\n// let testColumnData = []\r\n// testJson.forEach((element, index) => {\r\n//     let testObj = {\r\n//         Header: element,\r\n//         accessor: element,\r\n//         id: index\r\n//     }\r\n//     testColumnData.push(testObj)\r\n// });\r\n// console.log(testColumnData);\r\n// let columns = [\r\n//     {\r\n//         Header: \"nazev\",\r\n//         accessor: \"nazev\",\r\n//         id: \"0\"\r\n//     },\r\n//     {\r\n//         Header: \"trivialni\",\r\n//         accessor: \"trivialni\",\r\n//         id: \"1\"\r\n//     }\r\n// ]\r\n\r\n\r\n// console.log(columns);"]},"metadata":{},"sourceType":"module"}