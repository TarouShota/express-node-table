{"ast":null,"code":"import _defineProperty from\"D:/move-forward/react-ukol/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import React,{useEffect,useState}from\"react\";var _require=require(\"react\"),Children=_require.Children;var _require2=require(\"tabulator-tables\"),ColumnCalcsModule=_require2.ColumnCalcsModule;// // import './App.css'\n// import 'react-tabulator/lib/styles.css';\n// import { ReactTabulator } from 'react-tabulator'\n// import { Tabulator } from 'tabulator-tables';\n// function submitFile() {\n//     let formData = new FormData()\n//     formData.append('file', file);\n//     const fetchItems = async () => fetch(\"/api/tweets\", {\n//         // mode: 'no-cors',\n//         method: 'POST',\n//         body: formData\n//     })\n//         .then((response) => response.json())\n//         .then(({ data }) => {\n//             if (data.length) {\n//                 return data\n//                 console.log(data[1], data);\n//                 data[0].push(\"jine\");\n//                 data.forEach((element, index) => {\n//                     if (index == 0) {\n//                         return\n//                     }\n//                     element.push(\"0\")\n//                 })\n//                 let allArrays = data.slice(1, data.length);\n//                 setTableRows(data[0]);\n//                 setValues(allArrays);\n//                 console.log(tableRows);\n//                 console.log(values)\n//                 const columns = data[0]\n//                 /* Converting the array of arrays into an array of objects. */\n//                 rows = data.splice(1).map((arr) => {\n//                     const stateObject = {}\n//                     columns.forEach((column, index) => {\n//                         stateObject[column] = arr[index]\n//                     })\n//                     return stateObject\n//                 })\n//                 /* Adding a new property to each object in the array. */\n//                 rows.forEach(element => {\n//                     element.jine = \"0\"\n//                 });\n//                 console.log(rows);\n//                 // console.log(rows, columns)\n//                 const table = new Tabulator(\"#csvTable\", {\n//                     height: \"300px\",\n//                     data: rows,\n//                     autoColumns: true\n//                 });\n//             } else {\n//                 alert('The CSV is empty')\n//             }\n//         })\n//         .catch((e) => alert(e.message))\n//     return fetchItems()\n// }\nvar testArray=[[\"first\",\"1\",\"5\",\"10\",\"0\"],[\"second\",\"3\",\"7\",\"12\",\"0\"],[\"third\",\"5\",\"9\",\"14\",\"0\"],[\"fourth\",\"4\",\"8\",\"13\",\"0\"]];//'second', \"3\", \"7\", \"12\",\"0\"\n// , [\"third\", \"5\", \"9\", \"14\",\"0\"]\nvar childObj={};//export the func\n/**\r\n * It takes an array of arrays and returns an object with the first element of each array as the key\r\n * and the rest of the elements as the value.\r\n * @param jsonArray - [[\"1\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\r\n * \"0\", \"0\", \"0\", \"0\r\n * @returns {\r\n *     \"1\": {\r\n *         \"1\": {\r\n *             \"clicked\": true,\r\n *             \"value\": \"0\"\r\n *         },\r\n *         \"2\": {\r\n *             \"clicked\": false,\r\n *             \"value\": \"1\"\r\n *         },\r\n *         \"3\": {\r\n *             \"\r\n */export function objectConverter(jsonArray){if(jsonArray==undefined){return;}var stateObject={};jsonArray.forEach(function(element,index){// console.log(element[0])\n// console.log(element[index]);\n// console.log(stateObject[`${element[index]}`])\nelement.forEach(function(e,childIndex){if(childIndex===0){return stateObject[\"\".concat(element[0])]={};}if(e==\"0\"){Object.assign(childObj,_defineProperty({},childIndex,{clicked:true,value:e}));}else{Object.assign(childObj,_defineProperty({},childIndex,{clicked:false,//make it false\nvalue:e}));}// console.log(e);\n});Object.assign(stateObject[\"\".concat(element[0])],childObj);});return stateObject;}var finalTestArray=objectConverter(testArray);/**\r\n * It takes an object with a bunch of nested objects, and returns an array of objects with the same\r\n * keys as the nested objects, but with the value of the nested objects added together.\r\n * @param testingObject - {\r\n * @returns An array of objects.\r\n */export function calculateHours(testingObject){var finalJson=[];for(var key in testingObject){var finalObj={};finalObj['nazev']=key;finalObj['hodiny']=0;// key\nfor(var childKey in testingObject[\"\".concat(key)]){if(testingObject[\"\".concat(key)][\"\".concat(childKey)].clicked){finalObj['hodiny']+=parseInt(testingObject[\"\".concat(key)][\"\".concat(childKey)].value);// finalObj['first'] = testingObject['1'].value\n}}finalJson.push(finalObj);// console.log(finalJson)\n}return finalJson;}","map":{"version":3,"sources":["D:/move-forward/react-ukol/frontend/src/testScript.js"],"names":["React","useEffect","useState","require","Children","ColumnCalcsModule","testArray","childObj","objectConverter","jsonArray","undefined","stateObject","forEach","element","index","e","childIndex","Object","assign","clicked","value","finalTestArray","calculateHours","testingObject","finalJson","key","finalObj","childKey","parseInt","push"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nconst { Children } = require(\"react\");\r\nconst { ColumnCalcsModule } = require(\"tabulator-tables\");\r\n\r\n// // import './App.css'\r\n// import 'react-tabulator/lib/styles.css';\r\n// import { ReactTabulator } from 'react-tabulator'\r\n// import { Tabulator } from 'tabulator-tables';\r\n// function submitFile() {\r\n\r\n//     let formData = new FormData()\r\n//     formData.append('file', file);\r\n\r\n//     const fetchItems = async () => fetch(\"/api/tweets\", {\r\n//         // mode: 'no-cors',\r\n//         method: 'POST',\r\n//         body: formData\r\n//     })\r\n//         .then((response) => response.json())\r\n//         .then(({ data }) => {\r\n//             if (data.length) {\r\n//                 return data\r\n//                 console.log(data[1], data);\r\n//                 data[0].push(\"jine\");\r\n\r\n//                 data.forEach((element, index) => {\r\n//                     if (index == 0) {\r\n//                         return\r\n//                     }\r\n//                     element.push(\"0\")\r\n//                 })\r\n\r\n//                 let allArrays = data.slice(1, data.length);\r\n\r\n//                 setTableRows(data[0]);\r\n//                 setValues(allArrays);\r\n\r\n//                 console.log(tableRows);\r\n//                 console.log(values)\r\n//                 const columns = data[0]\r\n//                 /* Converting the array of arrays into an array of objects. */\r\n//                 rows = data.splice(1).map((arr) => {\r\n\r\n//                     const stateObject = {}\r\n//                     columns.forEach((column, index) => {\r\n//                         stateObject[column] = arr[index]\r\n//                     })\r\n//                     return stateObject\r\n//                 })\r\n\r\n//                 /* Adding a new property to each object in the array. */\r\n//                 rows.forEach(element => {\r\n//                     element.jine = \"0\"\r\n//                 });\r\n//                 console.log(rows);\r\n\r\n//                 // console.log(rows, columns)\r\n\r\n//                 const table = new Tabulator(\"#csvTable\", {\r\n//                     height: \"300px\",\r\n//                     data: rows,\r\n//                     autoColumns: true\r\n//                 });\r\n//             } else {\r\n//                 alert('The CSV is empty')\r\n//             }\r\n//         })\r\n//         .catch((e) => alert(e.message))\r\n//     return fetchItems()\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet testArray = [[\"first\", \"1\", \"5\", \"10\", \"0\"], [\"second\", \"3\", \"7\", \"12\", \"0\"], [\"third\", \"5\", \"9\", \"14\", \"0\"], [\"fourth\", \"4\", \"8\", \"13\", \"0\"]]\r\n//'second', \"3\", \"7\", \"12\",\"0\"\r\n// , [\"third\", \"5\", \"9\", \"14\",\"0\"]\r\n\r\nlet childObj = {}\r\n\r\n//export the func\r\n/**\r\n * It takes an array of arrays and returns an object with the first element of each array as the key\r\n * and the rest of the elements as the value.\r\n * @param jsonArray - [[\"1\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\r\n * \"0\", \"0\", \"0\", \"0\r\n * @returns {\r\n *     \"1\": {\r\n *         \"1\": {\r\n *             \"clicked\": true,\r\n *             \"value\": \"0\"\r\n *         },\r\n *         \"2\": {\r\n *             \"clicked\": false,\r\n *             \"value\": \"1\"\r\n *         },\r\n *         \"3\": {\r\n *             \"\r\n */\r\nexport function objectConverter(jsonArray) {\r\n    if (jsonArray == undefined) {\r\n        return\r\n    }\r\n\r\n    let stateObject = {}\r\n    jsonArray.forEach((element, index) => {\r\n        // console.log(element[0])\r\n        // console.log(element[index]);\r\n\r\n\r\n        // console.log(stateObject[`${element[index]}`])\r\n        element.forEach((e, childIndex) => {\r\n            if (childIndex === 0) {\r\n                return stateObject[`${element[0]}`] = {}\r\n            }\r\n            if (e == \"0\") {\r\n                Object.assign(childObj, {\r\n                    [childIndex]: {\r\n                        clicked: true,\r\n                        value: e\r\n\r\n                    }\r\n                })\r\n            } else {\r\n                Object.assign(childObj, {\r\n                    [childIndex]: {\r\n                        clicked: false,//make it false\r\n                        value: e\r\n\r\n                    }\r\n                })\r\n            }\r\n\r\n            // console.log(e);\r\n\r\n        });\r\n        Object.assign(stateObject[`${element[0]}`], childObj);\r\n\r\n    });\r\n    return stateObject\r\n}\r\n\r\nlet finalTestArray = (objectConverter(testArray))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * It takes an object with a bunch of nested objects, and returns an array of objects with the same\r\n * keys as the nested objects, but with the value of the nested objects added together.\r\n * @param testingObject - {\r\n * @returns An array of objects.\r\n */\r\nexport function calculateHours(testingObject) {\r\n    let finalJson = [];\r\n    for (const key in testingObject) {\r\n        let finalObj = {}\r\n        finalObj['nazev'] = key\r\n        finalObj['hodiny'] = 0\r\n        // key\r\n        for (const childKey in testingObject[`${key}`]) {\r\n\r\n\r\n            if (testingObject[`${key}`][`${childKey}`].clicked) {\r\n                finalObj['hodiny'] += parseInt(testingObject[`${key}`][`${childKey}`].value)\r\n\r\n                // finalObj['first'] = testingObject['1'].value\r\n            }\r\n\r\n        }\r\n        finalJson.push(finalObj)\r\n\r\n        // console.log(finalJson)\r\n    }\r\n\r\n    return finalJson\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}