{"ast":null,"code":"var _jsxFileName = \"D:\\\\move-forward\\\\react-ukol\\\\frontend\\\\src\\\\components\\\\react-table.js\",\n    _s = $RefreshSig$();\n\nimport React, { cloneElement, useEffect, useState } from 'react';\nimport { useTable } from \"react-table\";\nimport { objectConverter, calculateHours } from '../testScript';\nimport '../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst borderStyle = {};\nconst activeCell = {\n  backgroundColor: '#16DB65'\n};\nexport function ReactTable(jsonArray) {\n  _s();\n\n  // console.log(window.rows)\n  let rowData = window.rows;\n  let columnData = window.columns;\n  let jsonStateArray = jsonArray.jsonArray;\n  let convertedArray = objectConverter(jsonStateArray); // console.log(jsonStateArray);\n  // console.log(arrayToSend);\n  // console.log(rowData)\n  // console.log(window.dataCopy)\n  // console.log(jineObject)\n\n  const [cellData, setCellData] = useState(convertedArray);\n  const [hourlyRate, setHourlyRate] = useState(0);\n  const [totalHours, setTotalHours] = useState(0);\n  let finalJson = [];\n  let jineObject = {};\n\n  for (const key in convertedArray) {\n    jineObject[key] = 0;\n  }\n\n  const [value, setValue] = useState(jineObject);\n\n  const onChange = (e, name) => {\n    console.log(e);\n\n    const changeJine = () => setValue({ ...value,\n      [name]: e.target.value\n    });\n\n    changeJine();\n  };\n\n  const rateChange = e => {\n    setHourlyRate(e.target.value);\n  };\n\n  useEffect(() => {\n    console.log(value);\n  }, []); // console.log(columnData)\n  // console.log(jsonRows.jsonRows);\n  // console.log(jsonRows.jsonColumns)\n  //e.target.value\n\n  useEffect(() => {\n    console.log(cellData);\n    createLastData();\n  }, [cellData]); // const onBlur = (name, columnIndex) => {\n  //     updateMyData(name, columnIndex, value);\n  // };\n\n  const updateMyData = (name, columnIndex) => {\n    const togleState = () => setCellData({ ...cellData,\n      [name]: { ...cellData[name],\n        [columnIndex]: { ...cellData[name][columnIndex],\n          value: value[name]\n        }\n      }\n    });\n\n    togleState();\n  };\n\n  function MudaObject(name, columnIndex) {\n    function stateToggle() {\n      return !cellData[name][columnIndex].clicked;\n    }\n\n    const togleState = () => setCellData({ ...cellData,\n      [name]: { ...cellData[name],\n        [columnIndex]: { ...cellData[name][columnIndex],\n          clicked: stateToggle()\n        }\n      }\n    });\n\n    togleState();\n  } // const newData = [];\n  // origData.forEach((actorObj) => {\n  //     actorObj.movies.forEach((movie) => {\n  //         newData.push({\n  //             [\"actor\"]: actorObj.actor,\n  //             movie: movie.namel\n  //         });\n  //     });\n  // });\n\n  /* A function that is called when the user clicks on a cell. It is supposed to change the value of the\r\n  cell. */\n  // const togleState = () => setCellData({\n  //     ...cellData,\n  //     [name]: {\n  //         ...cellData[name],\n  //         [columnIndex]: {\n  //             ...cellData[name][columnIndex],\n  //             value: e.target.value\n  //         }\n  //     }\n  // })\n  // togleState()\n\n\n  let data = React.useMemo(() => rowData, []); // console.log(data);\n\n  const testJson = ['nazev', 'trivialni', 'grafika', 'pokrocile', 'jine'];\n  let testColumns = [];\n  columnData.forEach((element, index) => {\n    let testObj = {\n      Header: element,\n      accessor: element,\n      id: index\n    };\n    testColumns.push(testObj);\n  }); // console.log(testColumns)\n\n  let columns = React.useMemo(() => testColumns, []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  }); // function read(e, index, row) {\n  //     console.log(e);\n  // }\n\n  function FinalButton() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          marginTop: '2rem'\n        },\n        children: [\"Celkov\\xFD po\\u010Det hodin \", totalHours]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Celkov\\xE1 \\u010D\\xE1stka - \", totalHours * hourlyRate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n  let finalObj = {}; // function calculateHours() {\n  //     let finalJson = [];\n  //     for (const key in cellData) {\n  //         let finalObj = {}\n  //         for (const childKey in key) {\n  //             if (childKey.clicked) {\n  //                 finalObj[key] += childKey.value\n  //             }\n  //         }\n  //     }\n  // }\n\n  function createLastData(e) {\n    let lastData = calculateHours(cellData);\n    let totalSum = 0;\n    lastData.forEach(element => {\n      totalSum += element.hodiny;\n      element['součet'] = totalSum * hourlyRate;\n    });\n    lastData[lastData.length] = {\n      nazev: 'celkem',\n      hodiny: totalSum,\n      součet: totalSum * hourlyRate\n    }; // console.log(lastData)\n\n    let jsonToCsvData = JSON.stringify(lastData);\n    setTotalHours(totalSum);\n    submitFile();\n  }\n\n  function submitFile(jsonToCsv) {\n    let formData = new FormData();\n    formData.append('file', jsonToCsv);\n\n    const fetchItems = async () => fetch(\"/api/tocsv\", {\n      // mode: 'no-cors',\n      method: 'POST',\n      body: formData\n    }).then(response => response.json()).then(_ref => {\n      let {\n        data\n      } = _ref;\n\n      if (data.length) {\n        console.log('it worked!');\n        console.log(data);\n      } else {\n        console.log('it failed');\n      }\n    }).catch(e => alert(e.message));\n\n    fetchItems();\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n      className: \"table table-bordered table-dark \",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n            children: column.render(\"Header\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: rows.map((row, i) => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n            children: row.cells.map((cell, j) => {\n              if (cell.column.Header == testColumns[0].Header) {\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  rowSpan: cell.rowSpan,\n                  ...cell.getCellProps(),\n                  children: cell.render(\"Cell\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 267,\n                  columnNumber: 45\n                }, this);\n              }\n\n              if (cell.column.Header == 'jine') {\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  rowSpan: cell.rowSpan // onClick={() =>\n                  //     MudaObject(row.cells[0].value, cell.column.id)\n                  // }\n                  ,\n                  ...cell.getCellProps(),\n                  style: activeCell,\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    style: {\n                      width: '4rem'\n                    },\n                    value: value[row.cells[0].value],\n                    onChange: e => onChange(e, row.cells[0].value),\n                    onBlur: () => updateMyData(row.cells[0].value, cell.column.id)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 287,\n                    columnNumber: 46\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 280,\n                  columnNumber: 45\n                }, this);\n              }\n\n              if (cellData[row.cells[0].value][cell.column.id].clicked == true) {} // console.log(cell.column.id, row.cells[0].value)\n              // console.log(cell.column.Header)\n\n\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                rowSpan: cell.rowSpan,\n                onClick: () => MudaObject(row.cells[0].value, cell.column.id),\n                ...cell.getCellProps(),\n                style: cellData[row.cells[0].value][cell.column.id].clicked ? activeCell : borderStyle,\n                children: cell.render(\"Cell\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 308,\n                columnNumber: 41\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: hourlyRate,\n      onChange: e => setHourlyRate(e.target.value),\n      placeholder: \"hodinova sazba\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FinalButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ReactTable, \"QoIXTzO+0rAFgyGB8haAjs0j2G0=\", false, function () {\n  return [useTable];\n});\n\n_c = ReactTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReactTable\");","map":{"version":3,"sources":["D:/move-forward/react-ukol/frontend/src/components/react-table.js"],"names":["React","cloneElement","useEffect","useState","useTable","objectConverter","calculateHours","borderStyle","activeCell","backgroundColor","ReactTable","jsonArray","rowData","window","rows","columnData","columns","jsonStateArray","convertedArray","cellData","setCellData","hourlyRate","setHourlyRate","totalHours","setTotalHours","finalJson","jineObject","key","value","setValue","onChange","e","name","console","log","changeJine","target","rateChange","createLastData","updateMyData","columnIndex","togleState","MudaObject","stateToggle","clicked","data","useMemo","testJson","testColumns","forEach","element","index","testObj","Header","accessor","id","push","getTableProps","getTableBodyProps","headerGroups","prepareRow","FinalButton","marginTop","finalObj","lastData","totalSum","hodiny","length","nazev","součet","jsonToCsvData","JSON","stringify","submitFile","jsonToCsv","formData","FormData","append","fetchItems","fetch","method","body","then","response","json","catch","alert","message","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","j","rowSpan","getCellProps","width"],"mappings":"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","sourcesContent":["import React, { cloneElement, useEffect, useState } from 'react';\r\nimport { useTable } from \"react-table\";\r\nimport { objectConverter, calculateHours } from '../testScript';\r\nimport '../index.css';\r\n\r\n\r\n\r\n\r\nconst borderStyle = {\r\n\r\n};\r\nconst activeCell = {\r\n    backgroundColor: '#16DB65'\r\n}\r\n\r\nexport function ReactTable(jsonArray) {\r\n\r\n    // console.log(window.rows)\r\n    let rowData = window.rows\r\n    let columnData = window.columns\r\n    let jsonStateArray = jsonArray.jsonArray\r\n    let convertedArray = objectConverter(jsonStateArray);\r\n    // console.log(jsonStateArray);\r\n\r\n    // console.log(arrayToSend);\r\n    // console.log(rowData)\r\n    // console.log(window.dataCopy)\r\n\r\n\r\n    // console.log(jineObject)\r\n\r\n    const [cellData, setCellData] = useState(convertedArray);\r\n\r\n    const [hourlyRate, setHourlyRate] = useState(0)\r\n\r\n    const [totalHours, setTotalHours] = useState(0)\r\n\r\n    let finalJson = [];\r\n\r\n    let jineObject = {}\r\n    for (const key in convertedArray) {\r\n        jineObject[key] = 0;\r\n\r\n    }\r\n    const [value, setValue] = useState(jineObject);\r\n\r\n    const onChange = (e, name) => {\r\n        console.log(e)\r\n        const changeJine = () => setValue({\r\n            ...value,\r\n            [name]: e.target.value\r\n        })\r\n        changeJine()\r\n\r\n\r\n    };\r\n    const rateChange = (e) => {\r\n        setHourlyRate(e.target.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        console.log(value)\r\n    }, [])\r\n\r\n    // console.log(columnData)\r\n    // console.log(jsonRows.jsonRows);\r\n    // console.log(jsonRows.jsonColumns)\r\n    //e.target.value\r\n\r\n    useEffect(() => {\r\n        console.log(cellData);\r\n        createLastData()\r\n    }, [cellData])\r\n\r\n\r\n\r\n    // const onBlur = (name, columnIndex) => {\r\n\r\n    //     updateMyData(name, columnIndex, value);\r\n    // };\r\n\r\n    const updateMyData = (name, columnIndex) => {\r\n\r\n        const togleState = () => setCellData({\r\n            ...cellData,\r\n            [name]: {\r\n                ...cellData[name],\r\n                [columnIndex]: {\r\n                    ...cellData[name][columnIndex],\r\n                    value: value[name]\r\n\r\n\r\n\r\n                }\r\n            }\r\n        })\r\n        togleState()\r\n    }\r\n\r\n    function MudaObject(name, columnIndex) {\r\n\r\n        function stateToggle() {\r\n            return !cellData[name][columnIndex].clicked\r\n        }\r\n\r\n        const togleState = () => setCellData({\r\n            ...cellData,\r\n            [name]: {\r\n                ...cellData[name],\r\n                [columnIndex]: {\r\n                    ...cellData[name][columnIndex],\r\n                    clicked: stateToggle()\r\n                }\r\n            }\r\n        })\r\n        togleState()\r\n    }\r\n    // const newData = [];\r\n    // origData.forEach((actorObj) => {\r\n    //     actorObj.movies.forEach((movie) => {\r\n    //         newData.push({\r\n    //             [\"actor\"]: actorObj.actor,\r\n    //             movie: movie.namel\r\n    //         });\r\n    //     });\r\n    // });\r\n    /* A function that is called when the user clicks on a cell. It is supposed to change the value of the\r\n    cell. */\r\n    // const togleState = () => setCellData({\r\n    //     ...cellData,\r\n    //     [name]: {\r\n    //         ...cellData[name],\r\n    //         [columnIndex]: {\r\n    //             ...cellData[name][columnIndex],\r\n    //             value: e.target.value\r\n    //         }\r\n    //     }\r\n    // })\r\n    // togleState()\r\n\r\n\r\n\r\n    let data = React.useMemo(() => rowData, []);\r\n\r\n    // console.log(data);\r\n\r\n    const testJson = ['nazev', 'trivialni', 'grafika', 'pokrocile', 'jine']\r\n\r\n    let testColumns = []\r\n\r\n    columnData.forEach((element, index) => {\r\n        let testObj = {\r\n            Header: element,\r\n            accessor: element,\r\n            id: index\r\n        }\r\n        testColumns.push(testObj)\r\n    });\r\n\r\n    // console.log(testColumns)\r\n\r\n    let columns = React.useMemo(\r\n        () => testColumns,\r\n        []\r\n    );\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow\r\n    } = useTable({ columns, data });\r\n\r\n    // function read(e, index, row) {\r\n    //     console.log(e);\r\n    // }\r\n\r\n    function FinalButton() {\r\n        return (\r\n            <>\r\n                <h4 style={{ marginTop: '2rem' }}>Celkový počet hodin {totalHours}</h4>\r\n                <h4 >Celková částka - {totalHours * hourlyRate}</h4>\r\n            </>\r\n        )\r\n    }\r\n    let finalObj = {\r\n\r\n    }\r\n    // function calculateHours() {\r\n\r\n    //     let finalJson = [];\r\n    //     for (const key in cellData) {\r\n    //         let finalObj = {}\r\n    //         for (const childKey in key) {\r\n    //             if (childKey.clicked) {\r\n    //                 finalObj[key] += childKey.value\r\n    //             }\r\n    //         }\r\n\r\n    //     }\r\n\r\n    // }\r\n    function createLastData(e) {\r\n        let lastData = calculateHours(cellData)\r\n        let totalSum = 0\r\n        lastData.forEach(element => {\r\n            totalSum += element.hodiny\r\n            element['součet'] = totalSum * hourlyRate\r\n        });\r\n\r\n        lastData[lastData.length] = { nazev: 'celkem', hodiny: totalSum, součet: totalSum * hourlyRate }\r\n        // console.log(lastData)\r\n        let jsonToCsvData = JSON.stringify(lastData);\r\n        setTotalHours(totalSum)\r\n        submitFile()\r\n\r\n    }\r\n\r\n    function submitFile(jsonToCsv) {\r\n        let formData = new FormData()\r\n        formData.append('file', jsonToCsv);\r\n\r\n        const fetchItems = async () => fetch(\"/api/tocsv\", {\r\n            // mode: 'no-cors',\r\n            method: 'POST',\r\n            body: formData\r\n        })\r\n            .then((response) => response.json())\r\n            .then(({ data }) => {\r\n                if (data.length) {\r\n                    console.log('it worked!')\r\n                    console.log(data)\r\n                } else {\r\n                    console.log('it failed')\r\n                        ;\r\n                }\r\n            })\r\n            .catch((e) => alert(e.message))\r\n        fetchItems()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <table {...getTableProps()} className='table table-bordered table-dark '>\r\n                <thead>\r\n                    {headerGroups.map((headerGroup) => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map((column) => (\r\n                                <th {...column.getHeaderProps()} >\r\n                                    {column.render(\"Header\")}\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map((row, i) => {\r\n                        prepareRow(row);\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map((cell, j) => {\r\n                                    if (cell.column.Header == testColumns[0].Header) {\r\n\r\n\r\n                                        return (\r\n                                            <td\r\n                                                rowSpan={cell.rowSpan}\r\n\r\n                                                {...cell.getCellProps()}\r\n\r\n                                            >\r\n                                                {cell.render(\"Cell\")}\r\n                                            </td>\r\n                                        );\r\n                                    }\r\n\r\n                                    if (cell.column.Header == 'jine') {\r\n                                        return (\r\n                                            <td\r\n                                                rowSpan={cell.rowSpan}\r\n                                                // onClick={() =>\r\n                                                //     MudaObject(row.cells[0].value, cell.column.id)\r\n                                                // }\r\n                                                {...cell.getCellProps()}\r\n                                                style={activeCell}\r\n                                            ><input style={{ width: '4rem' }}\r\n                                                value={value[row.cells[0].value]}\r\n                                                onChange={(e) => onChange(e, row.cells[0].value)\r\n                                                }\r\n\r\n                                                onBlur={() =>\r\n                                                    updateMyData(row.cells[0].value, cell.column.id)\r\n                                                }\r\n                                            >\r\n                                                </input>\r\n                                                {/* {cell.render(\"Cell\")} */}\r\n                                            </td>\r\n                                        );\r\n\r\n                                    }\r\n                                    if (cellData[row.cells[0].value][cell.column.id].clicked == true) {\r\n\r\n                                    }\r\n                                    // console.log(cell.column.id, row.cells[0].value)\r\n                                    // console.log(cell.column.Header)\r\n                                    return (\r\n                                        <td\r\n                                            rowSpan={cell.rowSpan}\r\n\r\n                                            onClick={() =>\r\n                                                MudaObject(row.cells[0].value, cell.column.id)\r\n                                            }\r\n                                            {...cell.getCellProps()}\r\n                                            style={(cellData[row.cells[0].value][cell.column.id].clicked) ? activeCell : borderStyle\r\n                                            }\r\n                                        >\r\n                                            {/* border: \"3px solid #3D348B\", backgroundColor: 'white', color: 'black', cursor: 'pointer' */}\r\n                                            {cell.render(\"Cell\")}\r\n                                        </td>\r\n                                    );\r\n                                })}\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table >\r\n            <br />\r\n            <input value={hourlyRate} onChange={(e) => setHourlyRate(e.target.value)} placeholder='hodinova sazba'></input>\r\n\r\n            {/* <button onClick={(e) => createLastData(e)}>\r\n                vypočíst</button> */}\r\n\r\n            <FinalButton />\r\n        </>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}