{"ast":null,"code":"var _jsxFileName = \"D:\\\\move-forward\\\\react-ukol\\\\frontend\\\\src\\\\components\\\\react-table.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { useTable } from \"react-table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst borderStyle = {\n  border: \"1px dashed navy\"\n};\nexport function ReactTable(jsonRows, jsonColumns) {\n  _s();\n\n  if (jsonRows == undefined || jsonColumns == undefined) {\n    return;\n  }\n\n  console.log(jsonRows);\n  const origData = [{\n    actor: \"Johnny Depp\",\n    movies: [{\n      name: \"Pirates of the Carribean 1\"\n    }, {\n      name: \"Pirates of the Carribean 2\"\n    }, {\n      name: \"Pirates of the Carribean 3\"\n    }, {\n      name: \"Pirates of the Carribean 4\"\n    }]\n  }];\n  const newData = [];\n  origData.forEach(actorObj => {\n    actorObj.movies.forEach(movie => {\n      newData.push({\n        [\"actor\"]: actorObj.actor,\n        movie: movie.name\n      });\n    });\n  });\n  const data = newData;\n  console.log(newData);\n  const columns = React.useMemo(() => [{\n    Header: \"Actor\",\n    accessor: \"actor\",\n    id: \"0\"\n  }, {\n    Header: \"Movies\",\n    accessor: \"movie\",\n    id: \"1\"\n  }], []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  });\n\n  function read(e, index, row) {\n    console.log(e);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n        children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n          style: borderStyle,\n          children: column.render(\"Header\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n      children: rows.map((row, i) => {\n        prepareRow(row);\n        return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n          children: row.cells.map((cell, j) => {\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              rowSpan: cell.rowSpan,\n              onClick: () => console.log(cell.column.id, row.cells[0].value),\n              ...cell.getCellProps(),\n              style: borderStyle,\n              children: cell.render(\"Cell\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 37\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ReactTable, \"HMlhFI/RM0bWA5eIXYbZq69SaOs=\", false, function () {\n  return [useTable];\n});\n\n_c = ReactTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReactTable\");","map":{"version":3,"sources":["D:/move-forward/react-ukol/frontend/src/components/react-table.js"],"names":["React","useTable","borderStyle","border","ReactTable","jsonRows","jsonColumns","undefined","console","log","origData","actor","movies","name","newData","forEach","actorObj","movie","push","data","columns","useMemo","Header","accessor","id","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","read","e","index","row","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","i","getRowProps","cells","cell","j","rowSpan","value","getCellProps"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,aAAzB;;AAEA,MAAMC,WAAW,GAAG;AAChBC,EAAAA,MAAM,EAAE;AADQ,CAApB;AAIA,OAAO,SAASC,UAAT,CAAoBC,QAApB,EAA8BC,WAA9B,EAA2C;AAAA;;AAC9C,MAAID,QAAQ,IAAIE,SAAZ,IAAyBD,WAAW,IAAIC,SAA5C,EAAuD;AACnD;AACH;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACA,QAAMK,QAAQ,GAAG,CACb;AACIC,IAAAA,KAAK,EAAE,aADX;AAEIC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,IAAI,EAAE;AADV,KADI,EAIJ;AACIA,MAAAA,IAAI,EAAE;AADV,KAJI,EAOJ;AACIA,MAAAA,IAAI,EAAE;AADV,KAPI,EAUJ;AACIA,MAAAA,IAAI,EAAE;AADV,KAVI;AAFZ,GADa,CAAjB;AAmBA,QAAMC,OAAO,GAAG,EAAhB;AACAJ,EAAAA,QAAQ,CAACK,OAAT,CAAkBC,QAAD,IAAc;AAC3BA,IAAAA,QAAQ,CAACJ,MAAT,CAAgBG,OAAhB,CAAyBE,KAAD,IAAW;AAC/BH,MAAAA,OAAO,CAACI,IAAR,CAAa;AACT,SAAC,OAAD,GAAWF,QAAQ,CAACL,KADX;AAETM,QAAAA,KAAK,EAAEA,KAAK,CAACJ;AAFJ,OAAb;AAIH,KALD;AAMH,GAPD;AAQA,QAAMM,IAAI,GAAGL,OAAb;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAYK,OAAZ;AACA,QAAMM,OAAO,GAAGpB,KAAK,CAACqB,OAAN,CACZ,MAAM,CACF;AACIC,IAAAA,MAAM,EAAE,OADZ;AAEIC,IAAAA,QAAQ,EAAE,OAFd;AAGIC,IAAAA,EAAE,EAAE;AAHR,GADE,EAMF;AACIF,IAAAA,MAAM,EAAE,QADZ;AAEIC,IAAAA,QAAQ,EAAE,OAFd;AAGIC,IAAAA,EAAE,EAAE;AAHR,GANE,CADM,EAaZ,EAbY,CAAhB;AAeA,QAAM;AACFC,IAAAA,aADE;AAEFC,IAAAA,iBAFE;AAGFC,IAAAA,YAHE;AAIFC,IAAAA,IAJE;AAKFC,IAAAA;AALE,MAMF5B,QAAQ,CAAC;AAAEmB,IAAAA,OAAF;AAAWD,IAAAA;AAAX,GAAD,CANZ;;AAQA,WAASW,IAAT,CAAcC,CAAd,EAAiBC,KAAjB,EAAwBC,GAAxB,EAA6B;AACzBzB,IAAAA,OAAO,CAACC,GAAR,CAAYsB,CAAZ;AACH;;AACD,sBACI,sBAAWN,aAAa,EAAxB;AAAA,4BACI;AAAA,gBACKE,YAAY,CAACO,GAAb,CAAkBC,WAAD,iBACd,mBAAQA,WAAW,CAACC,mBAAZ,EAAR;AAAA,kBACKD,WAAW,CAACE,OAAZ,CAAoBH,GAApB,CAAyBI,MAAD,iBACrB,mBAAQA,MAAM,CAACC,cAAP,EAAR;AAAiC,UAAA,KAAK,EAAErC,WAAxC;AAAA,oBACKoC,MAAM,CAACE,MAAP,CAAc,QAAd;AADL;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YADJ,eAYI,sBAAWd,iBAAiB,EAA5B;AAAA,gBACKE,IAAI,CAACM,GAAL,CAAS,CAACD,GAAD,EAAMQ,CAAN,KAAY;AAClBZ,QAAAA,UAAU,CAACI,GAAD,CAAV;AACA,4BACI,mBAAQA,GAAG,CAACS,WAAJ,EAAR;AAAA,oBACKT,GAAG,CAACU,KAAJ,CAAUT,GAAV,CAAc,CAACU,IAAD,EAAOC,CAAP,KAAa;AACxB,gCACI;AACI,cAAA,OAAO,EAAED,IAAI,CAACE,OADlB;AAEI,cAAA,OAAO,EAAE,MACLtC,OAAO,CAACC,GAAR,CAAYmC,IAAI,CAACN,MAAL,CAAYd,EAAxB,EAA4BS,GAAG,CAACU,KAAJ,CAAU,CAAV,EAAaI,KAAzC,CAHR;AAAA,iBAKQH,IAAI,CAACI,YAAL,EALR;AAMI,cAAA,KAAK,EAAE9C,WANX;AAAA,wBAQK0C,IAAI,CAACJ,MAAL,CAAY,MAAZ;AARL;AAAA;AAAA;AAAA;AAAA,oBADJ;AAYH,WAbA;AADL;AAAA;AAAA;AAAA;AAAA,gBADJ;AAkBH,OApBA;AADL;AAAA;AAAA;AAAA;AAAA,YAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAsCH;;GAnGepC,U;UAwDRH,Q;;;KAxDQG,U","sourcesContent":["import * as React from \"react\";\r\nimport { useTable } from \"react-table\";\r\n\r\nconst borderStyle = {\r\n    border: \"1px dashed navy\"\r\n};\r\n\r\nexport function ReactTable(jsonRows, jsonColumns) {\r\n    if (jsonRows == undefined || jsonColumns == undefined) {\r\n        return\r\n    }\r\n    console.log(jsonRows)\r\n    const origData = [\r\n        {\r\n            actor: \"Johnny Depp\",\r\n            movies: [\r\n                {\r\n                    name: \"Pirates of the Carribean 1\"\r\n                },\r\n                {\r\n                    name: \"Pirates of the Carribean 2\"\r\n                },\r\n                {\r\n                    name: \"Pirates of the Carribean 3\"\r\n                },\r\n                {\r\n                    name: \"Pirates of the Carribean 4\"\r\n                }\r\n            ]\r\n        }\r\n    ];\r\n    const newData = [];\r\n    origData.forEach((actorObj) => {\r\n        actorObj.movies.forEach((movie) => {\r\n            newData.push({\r\n                [\"actor\"]: actorObj.actor,\r\n                movie: movie.name\r\n            });\r\n        });\r\n    });\r\n    const data = newData;\r\n    console.log(newData);\r\n    const columns = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: \"Actor\",\r\n                accessor: \"actor\",\r\n                id: \"0\"\r\n            },\r\n            {\r\n                Header: \"Movies\",\r\n                accessor: \"movie\",\r\n                id: \"1\"\r\n            }\r\n        ],\r\n        []\r\n    );\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow\r\n    } = useTable({ columns, data });\r\n\r\n    function read(e, index, row) {\r\n        console.log(e);\r\n    }\r\n    return (\r\n        <table {...getTableProps()}>\r\n            <thead>\r\n                {headerGroups.map((headerGroup) => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map((column) => (\r\n                            <th {...column.getHeaderProps()} style={borderStyle}>\r\n                                {column.render(\"Header\")}\r\n                            </th>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n                {rows.map((row, i) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                        <tr {...row.getRowProps()}>\r\n                            {row.cells.map((cell, j) => {\r\n                                return (\r\n                                    <td\r\n                                        rowSpan={cell.rowSpan}\r\n                                        onClick={() =>\r\n                                            console.log(cell.column.id, row.cells[0].value)\r\n                                        }\r\n                                        {...cell.getCellProps()}\r\n                                        style={borderStyle}\r\n                                    >\r\n                                        {cell.render(\"Cell\")}\r\n                                    </td>\r\n                                );\r\n                            })}\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}