{"ast":null,"code":"var _jsxFileName = \"D:\\\\move-forward\\\\react-ukol\\\\frontend\\\\src\\\\components\\\\react-table.js\";\nimport * as React from \"react\";\nimport { useTable } from \"react-table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst borderStyle = {\n  border: \"1px dashed navy\"\n};\nexport function ReactTable(jsonRows, jsonColumns) {\n  var _s = $RefreshSig$();\n\n  if (jsonColumns == undefined) {\n    return;\n  }\n\n  function Test() {\n    _s();\n\n    console.log(jsonRows);\n    const origData = [{\n      actor: \"Johnny Depp\",\n      movies: [{\n        name: \"Pirates of the Carribean 1\"\n      }, {\n        name: \"Pirates of the Carribean 2\"\n      }, {\n        name: \"Pirates of the Carribean 3\"\n      }, {\n        name: \"Pirates of the Carribean 4\"\n      }]\n    }];\n    const newData = [];\n    origData.forEach(actorObj => {\n      actorObj.movies.forEach(movie => {\n        newData.push({\n          [\"actor\"]: actorObj.actor,\n          movie: movie.name\n        });\n      });\n    });\n    const data = React.useMemo(() => newData, []);\n    console.log(newData);\n    const columns = React.useMemo(() => [{\n      Header: \"Actor\",\n      accessor: \"actor\",\n      id: \"0\"\n    }, {\n      Header: \"Movies\",\n      accessor: \"movie\",\n      id: \"1\"\n    }], []);\n    const {\n      getTableProps,\n      getTableBodyProps,\n      headerGroups,\n      rows,\n      prepareRow\n    } = useTable({\n      columns,\n      data\n    });\n\n    function read(e, index, row) {\n      console.log(e);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n            style: borderStyle,\n            children: column.render(\"Header\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: rows.map((row, i) => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n            children: row.cells.map((cell, j) => {\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                rowSpan: cell.rowSpan,\n                onClick: () => console.log(cell.column.id, row.cells[0].value),\n                ...cell.getCellProps(),\n                style: borderStyle,\n                children: cell.render(\"Cell\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 41\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this);\n  }\n\n  _s(Test, \"0PoJkgeqDYUkd9wTRNDxqISfUQ4=\", false, function () {\n    return [useTable];\n  });\n}\n_c = ReactTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReactTable\");","map":{"version":3,"sources":["D:/move-forward/react-ukol/frontend/src/components/react-table.js"],"names":["React","useTable","borderStyle","border","ReactTable","jsonRows","jsonColumns","undefined","Test","console","log","origData","actor","movies","name","newData","forEach","actorObj","movie","push","data","useMemo","columns","Header","accessor","id","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","read","e","index","row","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","i","getRowProps","cells","cell","j","rowSpan","value","getCellProps"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { useTable } from \"react-table\";\r\n\r\nconst borderStyle = {\r\n    border: \"1px dashed navy\"\r\n};\r\nexport function ReactTable(jsonRows, jsonColumns) {\r\n    if (jsonColumns == undefined) {\r\n        return\r\n    }\r\n\r\n    function Test() {\r\n        console.log(jsonRows)\r\n        const origData = [\r\n            {\r\n                actor: \"Johnny Depp\",\r\n                movies: [\r\n                    {\r\n                        name: \"Pirates of the Carribean 1\"\r\n                    },\r\n                    {\r\n                        name: \"Pirates of the Carribean 2\"\r\n                    },\r\n                    {\r\n                        name: \"Pirates of the Carribean 3\"\r\n                    },\r\n                    {\r\n                        name: \"Pirates of the Carribean 4\"\r\n                    }\r\n                ]\r\n            }\r\n        ];\r\n        const newData = [];\r\n        origData.forEach((actorObj) => {\r\n            actorObj.movies.forEach((movie) => {\r\n                newData.push({\r\n                    [\"actor\"]: actorObj.actor,\r\n                    movie: movie.name\r\n                });\r\n            });\r\n        });\r\n        const data = React.useMemo(() => newData, []);\r\n        console.log(newData);\r\n        const columns = React.useMemo(\r\n            () => [\r\n                {\r\n                    Header: \"Actor\",\r\n                    accessor: \"actor\",\r\n                    id: \"0\"\r\n                },\r\n                {\r\n                    Header: \"Movies\",\r\n                    accessor: \"movie\",\r\n                    id: \"1\"\r\n                }\r\n            ],\r\n            []\r\n        );\r\n        const {\r\n            getTableProps,\r\n            getTableBodyProps,\r\n            headerGroups,\r\n            rows,\r\n            prepareRow\r\n        } = useTable({ columns, data });\r\n\r\n        function read(e, index, row) {\r\n            console.log(e);\r\n        }\r\n        return (\r\n            <table {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map((headerGroup) => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map((column) => (\r\n                                <th {...column.getHeaderProps()} style={borderStyle}>\r\n                                    {column.render(\"Header\")}\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map((row, i) => {\r\n                        prepareRow(row);\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map((cell, j) => {\r\n                                    return (\r\n                                        <td\r\n                                            rowSpan={cell.rowSpan}\r\n                                            onClick={() =>\r\n                                                console.log(cell.column.id, row.cells[0].value)\r\n                                            }\r\n                                            {...cell.getCellProps()}\r\n                                            style={borderStyle}\r\n                                        >\r\n                                            {cell.render(\"Cell\")}\r\n                                        </td>\r\n                                    );\r\n                                })}\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}