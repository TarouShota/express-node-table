{"ast":null,"code":"import React, { useEffect, useState } from \"react\";\n\nconst {\n  Children\n} = require(\"react\");\n\nconst {\n  ColumnCalcsModule\n} = require(\"tabulator-tables\"); // // import './App.css'\n// import 'react-tabulator/lib/styles.css';\n// import { ReactTabulator } from 'react-tabulator'\n// import { Tabulator } from 'tabulator-tables';\n// function submitFile() {\n//     let formData = new FormData()\n//     formData.append('file', file);\n//     const fetchItems = async () => fetch(\"/api/tweets\", {\n//         // mode: 'no-cors',\n//         method: 'POST',\n//         body: formData\n//     })\n//         .then((response) => response.json())\n//         .then(({ data }) => {\n//             if (data.length) {\n//                 return data\n//                 console.log(data[1], data);\n//                 data[0].push(\"jine\");\n//                 data.forEach((element, index) => {\n//                     if (index == 0) {\n//                         return\n//                     }\n//                     element.push(\"0\")\n//                 })\n//                 let allArrays = data.slice(1, data.length);\n//                 setTableRows(data[0]);\n//                 setValues(allArrays);\n//                 console.log(tableRows);\n//                 console.log(values)\n//                 const columns = data[0]\n//                 /* Converting the array of arrays into an array of objects. */\n//                 rows = data.splice(1).map((arr) => {\n//                     const stateObject = {}\n//                     columns.forEach((column, index) => {\n//                         stateObject[column] = arr[index]\n//                     })\n//                     return stateObject\n//                 })\n//                 /* Adding a new property to each object in the array. */\n//                 rows.forEach(element => {\n//                     element.jine = \"0\"\n//                 });\n//                 console.log(rows);\n//                 // console.log(rows, columns)\n//                 const table = new Tabulator(\"#csvTable\", {\n//                     height: \"300px\",\n//                     data: rows,\n//                     autoColumns: true\n//                 });\n//             } else {\n//                 alert('The CSV is empty')\n//             }\n//         })\n//         .catch((e) => alert(e.message))\n//     return fetchItems()\n// }\n\n\nlet testArray = [[\"first\", \"1\", \"5\", \"10\", \"0\"], [\"second\", \"3\", \"7\", \"12\", \"0\"], [\"third\", \"5\", \"9\", \"14\", \"0\"], [\"fourth\", \"4\", \"8\", \"13\", \"0\"]]; //'second', \"3\", \"7\", \"12\",\"0\"\n// , [\"third\", \"5\", \"9\", \"14\",\"0\"]\n\nlet childObj = {}; //export the func\n\n/**\r\n * It takes an array of arrays and returns an object with the first element of each array as the key\r\n * and the rest of the elements as the value.\r\n * @param jsonArray - [[\"1\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\r\n * \"0\", \"0\", \"0\", \"0\r\n * @returns {\r\n *     \"1\": {\r\n *         \"1\": {\r\n *             \"clicked\": true,\r\n *             \"value\": \"0\"\r\n *         },\r\n *         \"2\": {\r\n *             \"clicked\": false,\r\n *             \"value\": \"1\"\r\n *         },\r\n *         \"3\": {\r\n *             \"\r\n */\n\nexport function objectConverter(jsonArray) {\n  if (jsonArray == undefined) {\n    return;\n  }\n\n  let stateObject = {};\n  jsonArray.forEach((element, index) => {\n    // console.log(element[0])\n    // console.log(element[index]);\n    // console.log(stateObject[`${element[index]}`])\n    element.forEach((e, childIndex) => {\n      if (childIndex === 0) {\n        return stateObject[`${element[0]}`] = {};\n      }\n\n      if (e == \"0\") {\n        Object.assign(childObj, {\n          [childIndex]: {\n            clicked: true,\n            value: e\n          }\n        });\n      } else {\n        Object.assign(childObj, {\n          [childIndex]: {\n            clicked: false,\n            //make it false\n            value: e\n          }\n        });\n      } // console.log(e);\n\n    });\n    Object.assign(stateObject[`${element[0]}`], childObj);\n  });\n  return stateObject;\n}\nlet finalTestArray = objectConverter(testArray);\n/**\r\n * It takes an object with a bunch of nested objects, and returns an array of objects with the same\r\n * keys as the nested objects, but with the value of the nested objects added together.\r\n * @param testingObject - {\r\n * @returns An array of objects.\r\n */\n\nexport function calculateHours(testingObject) {\n  let finalJson = [];\n\n  for (const key in testingObject) {\n    let finalObj = {};\n    finalObj['nazev'] = key;\n    finalObj['hodiny'] = 0; // key\n\n    for (const childKey in testingObject[`${key}`]) {\n      if (testingObject[`${key}`][`${childKey}`].clicked) {\n        finalObj['hodiny'] += parseInt(testingObject[`${key}`][`${childKey}`].value); // finalObj['first'] = testingObject['1'].value\n      }\n    }\n\n    finalJson.push(finalObj); // console.log(finalJson)\n  }\n\n  return finalJson;\n}","map":{"version":3,"sources":["D:/move-forward/react-ukol/frontend/src/testScript.js"],"names":["React","useEffect","useState","Children","require","ColumnCalcsModule","testArray","childObj","objectConverter","jsonArray","undefined","stateObject","forEach","element","index","e","childIndex","Object","assign","clicked","value","finalTestArray","calculateHours","testingObject","finalJson","key","finalObj","childKey","parseInt","push"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nconst { Children } = require(\"react\");\r\nconst { ColumnCalcsModule } = require(\"tabulator-tables\");\r\n\r\n// // import './App.css'\r\n// import 'react-tabulator/lib/styles.css';\r\n// import { ReactTabulator } from 'react-tabulator'\r\n// import { Tabulator } from 'tabulator-tables';\r\n// function submitFile() {\r\n\r\n//     let formData = new FormData()\r\n//     formData.append('file', file);\r\n\r\n//     const fetchItems = async () => fetch(\"/api/tweets\", {\r\n//         // mode: 'no-cors',\r\n//         method: 'POST',\r\n//         body: formData\r\n//     })\r\n//         .then((response) => response.json())\r\n//         .then(({ data }) => {\r\n//             if (data.length) {\r\n//                 return data\r\n//                 console.log(data[1], data);\r\n//                 data[0].push(\"jine\");\r\n\r\n//                 data.forEach((element, index) => {\r\n//                     if (index == 0) {\r\n//                         return\r\n//                     }\r\n//                     element.push(\"0\")\r\n//                 })\r\n\r\n//                 let allArrays = data.slice(1, data.length);\r\n\r\n//                 setTableRows(data[0]);\r\n//                 setValues(allArrays);\r\n\r\n//                 console.log(tableRows);\r\n//                 console.log(values)\r\n//                 const columns = data[0]\r\n//                 /* Converting the array of arrays into an array of objects. */\r\n//                 rows = data.splice(1).map((arr) => {\r\n\r\n//                     const stateObject = {}\r\n//                     columns.forEach((column, index) => {\r\n//                         stateObject[column] = arr[index]\r\n//                     })\r\n//                     return stateObject\r\n//                 })\r\n\r\n//                 /* Adding a new property to each object in the array. */\r\n//                 rows.forEach(element => {\r\n//                     element.jine = \"0\"\r\n//                 });\r\n//                 console.log(rows);\r\n\r\n//                 // console.log(rows, columns)\r\n\r\n//                 const table = new Tabulator(\"#csvTable\", {\r\n//                     height: \"300px\",\r\n//                     data: rows,\r\n//                     autoColumns: true\r\n//                 });\r\n//             } else {\r\n//                 alert('The CSV is empty')\r\n//             }\r\n//         })\r\n//         .catch((e) => alert(e.message))\r\n//     return fetchItems()\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet testArray = [[\"first\", \"1\", \"5\", \"10\", \"0\"], [\"second\", \"3\", \"7\", \"12\", \"0\"], [\"third\", \"5\", \"9\", \"14\", \"0\"], [\"fourth\", \"4\", \"8\", \"13\", \"0\"]]\r\n//'second', \"3\", \"7\", \"12\",\"0\"\r\n// , [\"third\", \"5\", \"9\", \"14\",\"0\"]\r\n\r\nlet childObj = {}\r\n\r\n//export the func\r\n/**\r\n * It takes an array of arrays and returns an object with the first element of each array as the key\r\n * and the rest of the elements as the value.\r\n * @param jsonArray - [[\"1\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\r\n * \"0\", \"0\", \"0\", \"0\r\n * @returns {\r\n *     \"1\": {\r\n *         \"1\": {\r\n *             \"clicked\": true,\r\n *             \"value\": \"0\"\r\n *         },\r\n *         \"2\": {\r\n *             \"clicked\": false,\r\n *             \"value\": \"1\"\r\n *         },\r\n *         \"3\": {\r\n *             \"\r\n */\r\nexport function objectConverter(jsonArray) {\r\n    if (jsonArray == undefined) {\r\n        return\r\n    }\r\n\r\n    let stateObject = {}\r\n    jsonArray.forEach((element, index) => {\r\n        // console.log(element[0])\r\n        // console.log(element[index]);\r\n\r\n\r\n        // console.log(stateObject[`${element[index]}`])\r\n        element.forEach((e, childIndex) => {\r\n            if (childIndex === 0) {\r\n                return stateObject[`${element[0]}`] = {}\r\n            }\r\n            if (e == \"0\") {\r\n                Object.assign(childObj, {\r\n                    [childIndex]: {\r\n                        clicked: true,\r\n                        value: e\r\n\r\n                    }\r\n                })\r\n            } else {\r\n                Object.assign(childObj, {\r\n                    [childIndex]: {\r\n                        clicked: false,//make it false\r\n                        value: e\r\n\r\n                    }\r\n                })\r\n            }\r\n\r\n            // console.log(e);\r\n\r\n        });\r\n        Object.assign(stateObject[`${element[0]}`], childObj);\r\n\r\n    });\r\n    return stateObject\r\n}\r\n\r\nlet finalTestArray = (objectConverter(testArray))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * It takes an object with a bunch of nested objects, and returns an array of objects with the same\r\n * keys as the nested objects, but with the value of the nested objects added together.\r\n * @param testingObject - {\r\n * @returns An array of objects.\r\n */\r\nexport function calculateHours(testingObject) {\r\n    let finalJson = [];\r\n    for (const key in testingObject) {\r\n        let finalObj = {}\r\n        finalObj['nazev'] = key\r\n        finalObj['hodiny'] = 0\r\n        // key\r\n        for (const childKey in testingObject[`${key}`]) {\r\n\r\n\r\n            if (testingObject[`${key}`][`${childKey}`].clicked) {\r\n                finalObj['hodiny'] += parseInt(testingObject[`${key}`][`${childKey}`].value)\r\n\r\n                // finalObj['first'] = testingObject['1'].value\r\n            }\r\n\r\n        }\r\n        finalJson.push(finalObj)\r\n\r\n        // console.log(finalJson)\r\n    }\r\n\r\n    return finalJson\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}