[{"D:\\move-forward\\react-ukol\\frontend\\src\\index.js":"1","D:\\move-forward\\react-ukol\\frontend\\src\\App.js":"2","D:\\move-forward\\react-ukol\\frontend\\src\\reportWebVitals.js":"3","D:\\move-forward\\react-ukol\\frontend\\src\\jstable.js":"4","D:\\move-forward\\react-ukol\\frontend\\src\\components\\react-table.js":"5","D:\\move-forward\\react-ukol\\frontend\\src\\testScript.js":"6"},{"size":759,"mtime":1651750352035,"results":"7","hashOfConfig":"8"},{"size":770,"mtime":1650873725467,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1650481588583,"results":"10","hashOfConfig":"8"},{"size":4236,"mtime":1651753188456,"results":"11","hashOfConfig":"8"},{"size":13004,"mtime":1651750791967,"results":"12","hashOfConfig":"8"},{"size":5368,"mtime":1650874493095,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"odctjp",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"21"},"D:\\move-forward\\react-ukol\\frontend\\src\\index.js",["36","37"],[],"D:\\move-forward\\react-ukol\\frontend\\src\\App.js",["38","39","40","41"],[],"import logo from './logo.svg';\nimport './index.css';\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nfunction App() {\n\n  useEffect(() => {\n    fetchItems();\n  }, []);\n\n  const [items, setItems] = useState([]);\n\n  const fetchItems = async () => {\n    fetch(\"/api/tweets\").then(async response => {\n      let data = await response.json()\n      console.log(data);\n      setItems(data);\n    })\n\n    // setItems(data);\n  };\n  if (items.length != 0) {\n    console.log(items.employees['employee'][0]);\n  }\n\n\n\n  return (\n    <section>\n      {items.length !== 0 && <h2>{Object.values(items.employees['employee'][0])}</h2>\n      }\n\n    </section >\n  );\n\n}\n\nexport default App;\n",[],"D:\\move-forward\\react-ukol\\frontend\\src\\reportWebVitals.js",[],[],"D:\\move-forward\\react-ukol\\frontend\\src\\jstable.js",["42","43","44","45","46","47","48"],[],"import React, { useEffect, useState } from 'react';\r\n\r\n// import './App.css'\r\nimport 'react-tabulator/lib/styles.css';\r\nimport { ReactTabulator } from 'react-tabulator'\r\nimport { Tabulator } from 'tabulator-tables';\r\nimport { ReactTable } from './components/react-table';\r\nimport { useTable } from 'react-table'\r\n\r\n/* Checking if the react version is the same. */\r\nrequire('react-dom');\r\nwindow.React2 = require('react');\r\nconsole.log(window.React1 === window.React2);\r\n\r\n/**\r\n * It takes a CSV file, converts it into an array of objects, and then adds a new property to each\r\n * object in the array.\r\n */\r\nexport function ReadCsv() {\r\n    /* A React hook that is used to store the values of the table. */\r\n    const [tableRows, setTableRows] = useState([]);\r\n\r\n    //State to store the values\r\n    const [values, setValues] = useState([]);\r\n\r\n\r\n\r\n    let file = null;\r\n    function fileInput(e) {\r\n        //setting the columns of the csv table\r\n        file = e.target.files[0]\r\n        // console.log(e.target.files[0]);\r\n    }\r\n    /**\r\n     * It fetches a CSV file, in a json format, then converts it into an array of\r\n     * objects\r\n     *\r\n     */\r\n    function submitFile() {\r\n\r\n        let formData = new FormData()\r\n        formData.append('file', file);\r\n\r\n        const fetchItems = async () => fetch(\"/api/tweets\", {\r\n            // mode: 'no-cors',\r\n            method: 'POST',\r\n            body: formData\r\n        })\r\n            .then((response) => response.json())\r\n            .then(({ data }) => {\r\n                if (data.length) {\r\n                    // data.forEach((element, index) => {\r\n                    //     if (index == 0) {\r\n                    //         return\r\n                    //     } console.log(element);\r\n                    // })\r\n                  \r\n                    data[0].push(\"jine\");\r\n\r\n                    data.forEach((element, index) => {\r\n                        if (index == 0) {\r\n                            return\r\n                        }\r\n                        element.push(\"0\")\r\n                    })\r\n                    console.log(data[0], data);\r\n                    \r\n                    //removing the first array from the object\r\n                    let allArrays = data.slice(1, data.length);\r\n\r\n                    setTableRows(data[0]);\r\n                    setValues(allArrays);\r\n\r\n                     /* Setting the columns of the table. */\r\n                    \r\n                    window.columns = data[0]\r\n                    /* Converting the array of arrays into an array of objects. */\r\n                    window.rows = data.splice(1).map((arr) => {\r\n\r\n                        const obj = {}\r\n                        window.columns.forEach((column, index) => {\r\n                            obj[column] = arr[index]\r\n                        })\r\n                        return obj\r\n                    })\r\n\r\n                    /* Adding a new property to each object in the array. */\r\n                    window.rows.forEach(element => {\r\n                        element.jine = \"0\"\r\n                    });\r\n                    console.log(window.rows);\r\n\r\n                } else {\r\n                    alert('The CSV is empty')\r\n                }\r\n            })\r\n            .catch((e) => alert(e.message))\r\n        fetchItems()\r\n\r\n\r\n    }\r\n \r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"container py-4\">\r\n            <h1>Nahrát CSV</h1>\r\n            <label htmlFor='file'>Vyberte file</label>\r\n            <input type='file' className=\"form-control\" name='file' id='file' onChange={fileInput} />\r\n            <button className=\"btn btn primary mt-2\" id=\"submitFile\" onClick={submitFile}>Přečíst</button>\r\n            {/* <div className=\"mt-2\" id=\"csvTable\"></div> */}\r\n            {(window.rows != undefined && window.columns) &&\r\n            \r\n                <ReactTable jsonArray={values} />\r\n            }\r\n\r\n            {/* <h1>{tableRows} and {values}</h1> */}\r\n            {/* <CreateTable /> */}\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n    // const data = require(\"./data\");\r\n\r\n\r\n  \r\n\r\n    // function tableClick(e) {\r\n    //     console.log(e)\r\n    //     console.log(e.target.innerText)\r\n    //     console.log()\r\n    // }\r\n\r\n","D:\\move-forward\\react-ukol\\frontend\\src\\components\\react-table.js",["49","50","51","52","53","54","55","56"],[],"D:\\move-forward\\react-ukol\\frontend\\src\\testScript.js",["57","58","59","60","61","62","63","64"],[],"import React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nconst { Children } = require(\"react\");\r\nconst { ColumnCalcsModule } = require(\"tabulator-tables\");\r\n\r\n// // import './App.css'\r\n// import 'react-tabulator/lib/styles.css';\r\n// import { ReactTabulator } from 'react-tabulator'\r\n// import { Tabulator } from 'tabulator-tables';\r\n// function submitFile() {\r\n\r\n//     let formData = new FormData()\r\n//     formData.append('file', file);\r\n\r\n//     const fetchItems = async () => fetch(\"/api/tweets\", {\r\n//         // mode: 'no-cors',\r\n//         method: 'POST',\r\n//         body: formData\r\n//     })\r\n//         .then((response) => response.json())\r\n//         .then(({ data }) => {\r\n//             if (data.length) {\r\n//                 return data\r\n//                 console.log(data[1], data);\r\n//                 data[0].push(\"jine\");\r\n\r\n//                 data.forEach((element, index) => {\r\n//                     if (index == 0) {\r\n//                         return\r\n//                     }\r\n//                     element.push(\"0\")\r\n//                 })\r\n\r\n//                 let allArrays = data.slice(1, data.length);\r\n\r\n//                 setTableRows(data[0]);\r\n//                 setValues(allArrays);\r\n\r\n//                 console.log(tableRows);\r\n//                 console.log(values)\r\n//                 const columns = data[0]\r\n//                 /* Converting the array of arrays into an array of objects. */\r\n//                 rows = data.splice(1).map((arr) => {\r\n\r\n//                     const stateObject = {}\r\n//                     columns.forEach((column, index) => {\r\n//                         stateObject[column] = arr[index]\r\n//                     })\r\n//                     return stateObject\r\n//                 })\r\n\r\n//                 /* Adding a new property to each object in the array. */\r\n//                 rows.forEach(element => {\r\n//                     element.jine = \"0\"\r\n//                 });\r\n//                 console.log(rows);\r\n\r\n//                 // console.log(rows, columns)\r\n\r\n//                 const table = new Tabulator(\"#csvTable\", {\r\n//                     height: \"300px\",\r\n//                     data: rows,\r\n//                     autoColumns: true\r\n//                 });\r\n//             } else {\r\n//                 alert('The CSV is empty')\r\n//             }\r\n//         })\r\n//         .catch((e) => alert(e.message))\r\n//     return fetchItems()\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet testArray = [[\"first\", \"1\", \"5\", \"10\", \"0\"], [\"second\", \"3\", \"7\", \"12\", \"0\"], [\"third\", \"5\", \"9\", \"14\", \"0\"], [\"fourth\", \"4\", \"8\", \"13\", \"0\"]]\r\n//'second', \"3\", \"7\", \"12\",\"0\"\r\n// , [\"third\", \"5\", \"9\", \"14\",\"0\"]\r\n\r\nlet childObj = {}\r\n\r\n//export the func\r\n/**\r\n * It takes an array of arrays and returns an object with the first element of each array as the key\r\n * and the rest of the elements as the value.\r\n * @param jsonArray - [[\"1\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\r\n * \"0\", \"0\", \"0\", \"0\r\n * @returns {\r\n *     \"1\": {\r\n *         \"1\": {\r\n *             \"clicked\": true,\r\n *             \"value\": \"0\"\r\n *         },\r\n *         \"2\": {\r\n *             \"clicked\": false,\r\n *             \"value\": \"1\"\r\n *         },\r\n *         \"3\": {\r\n *             \"\r\n */\r\nexport function objectConverter(jsonArray) {\r\n    if (jsonArray == undefined) {\r\n        return\r\n    }\r\n\r\n    let stateObject = {}\r\n    jsonArray.forEach((element, index) => {\r\n        // console.log(element[0])\r\n        // console.log(element[index]);\r\n\r\n\r\n        // console.log(stateObject[`${element[index]}`])\r\n        element.forEach((e, childIndex) => {\r\n            if (childIndex === 0) {\r\n                return stateObject[`${element[0]}`] = {}\r\n            }\r\n            if (e == \"0\") {\r\n                Object.assign(childObj, {\r\n                    [childIndex]: {\r\n                        clicked: true,\r\n                        value: e\r\n\r\n                    }\r\n                })\r\n            } else {\r\n                Object.assign(childObj, {\r\n                    [childIndex]: {\r\n                        clicked: false,//make it false\r\n                        value: e\r\n\r\n                    }\r\n                })\r\n            }\r\n\r\n            // console.log(e);\r\n\r\n        });\r\n        Object.assign(stateObject[`${element[0]}`], childObj);\r\n\r\n    });\r\n    return stateObject\r\n}\r\n\r\nlet finalTestArray = (objectConverter(testArray))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * It takes an object with a bunch of nested objects, and returns an array of objects with the same\r\n * keys as the nested objects, but with the value of the nested objects added together.\r\n * @param testingObject - {\r\n * @returns An array of objects.\r\n */\r\nexport function calculateHours(testingObject) {\r\n    let finalJson = [];\r\n    for (const key in testingObject) {\r\n        let finalObj = {}\r\n        finalObj['nazev'] = key\r\n        finalObj['hodiny'] = 0\r\n        // key\r\n        for (const childKey in testingObject[`${key}`]) {\r\n\r\n\r\n            if (testingObject[`${key}`][`${childKey}`].clicked) {\r\n                finalObj['hodiny'] += parseInt(testingObject[`${key}`][`${childKey}`].value)\r\n\r\n                // finalObj['first'] = testingObject['1'].value\r\n            }\r\n\r\n        }\r\n        finalJson.push(finalObj)\r\n\r\n        // console.log(finalJson)\r\n    }\r\n\r\n    return finalJson\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",{"ruleId":"65","severity":1,"message":"66","line":4,"column":8,"nodeType":"67","messageId":"68","endLine":4,"endColumn":11},{"ruleId":"65","severity":1,"message":"69","line":9,"column":10,"nodeType":"67","messageId":"68","endLine":9,"endColumn":20},{"ruleId":"65","severity":1,"message":"70","line":1,"column":8,"nodeType":"67","messageId":"68","endLine":1,"endColumn":12},{"ruleId":"65","severity":1,"message":"71","line":4,"column":10,"nodeType":"67","messageId":"68","endLine":4,"endColumn":14},{"ruleId":"65","severity":1,"message":"72","line":5,"column":27,"nodeType":"67","messageId":"68","endLine":5,"endColumn":33},{"ruleId":"73","severity":1,"message":"74","line":24,"column":20,"nodeType":"75","messageId":"76","endLine":24,"endColumn":22},{"ruleId":"65","severity":1,"message":"77","line":1,"column":17,"nodeType":"67","messageId":"68","endLine":1,"endColumn":26},{"ruleId":"65","severity":1,"message":"78","line":5,"column":10,"nodeType":"67","messageId":"68","endLine":5,"endColumn":24},{"ruleId":"65","severity":1,"message":"79","line":6,"column":10,"nodeType":"67","messageId":"68","endLine":6,"endColumn":19},{"ruleId":"65","severity":1,"message":"80","line":8,"column":10,"nodeType":"67","messageId":"68","endLine":8,"endColumn":18},{"ruleId":"65","severity":1,"message":"81","line":21,"column":12,"nodeType":"67","messageId":"68","endLine":21,"endColumn":21},{"ruleId":"73","severity":1,"message":"82","line":61,"column":35,"nodeType":"75","messageId":"76","endLine":61,"endColumn":37},{"ruleId":"73","severity":1,"message":"74","line":114,"column":27,"nodeType":"75","messageId":"76","endLine":114,"endColumn":29},{"ruleId":"65","severity":1,"message":"83","line":1,"column":17,"nodeType":"67","messageId":"68","endLine":1,"endColumn":29},{"ruleId":"65","severity":1,"message":"77","line":1,"column":31,"nodeType":"67","messageId":"68","endLine":1,"endColumn":40},{"ruleId":"84","severity":1,"message":"85","line":116,"column":45,"nodeType":"86","endLine":116,"endColumn":47,"suggestions":"87"},{"ruleId":"84","severity":1,"message":"88","line":136,"column":9,"nodeType":"86","endLine":136,"endColumn":11,"suggestions":"89"},{"ruleId":"73","severity":1,"message":"74","line":216,"column":26,"nodeType":"75","messageId":"76","endLine":216,"endColumn":28},{"ruleId":"73","severity":1,"message":"82","line":296,"column":60,"nodeType":"75","messageId":"76","endLine":296,"endColumn":62},{"ruleId":"73","severity":1,"message":"82","line":311,"column":60,"nodeType":"75","messageId":"76","endLine":311,"endColumn":62},{"ruleId":"73","severity":1,"message":"82","line":333,"column":94,"nodeType":"75","messageId":"76","endLine":333,"endColumn":96},{"ruleId":"65","severity":1,"message":"90","line":1,"column":8,"nodeType":"67","messageId":"68","endLine":1,"endColumn":13},{"ruleId":"65","severity":1,"message":"77","line":1,"column":17,"nodeType":"67","messageId":"68","endLine":1,"endColumn":26},{"ruleId":"65","severity":1,"message":"91","line":1,"column":28,"nodeType":"67","messageId":"68","endLine":1,"endColumn":36},{"ruleId":"65","severity":1,"message":"92","line":5,"column":9,"nodeType":"67","messageId":"68","endLine":5,"endColumn":17},{"ruleId":"65","severity":1,"message":"93","line":6,"column":9,"nodeType":"67","messageId":"68","endLine":6,"endColumn":26},{"ruleId":"73","severity":1,"message":"82","line":107,"column":19,"nodeType":"75","messageId":"76","endLine":107,"endColumn":21},{"ruleId":"73","severity":1,"message":"82","line":122,"column":19,"nodeType":"75","messageId":"76","endLine":122,"endColumn":21},{"ruleId":"65","severity":1,"message":"94","line":149,"column":5,"nodeType":"67","messageId":"68","endLine":149,"endColumn":19},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","'ReactTable' is defined but never used.","'logo' is defined but never used.","'Link' is defined but never used.","'Router' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'ReactTabulator' is defined but never used.","'Tabulator' is defined but never used.","'useTable' is defined but never used.","'tableRows' is assigned a value but never used.","Expected '===' and instead saw '=='.","'cloneElement' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useMemo has a missing dependency: 'rowData'. Either include it or remove the dependency array.","ArrayExpression",["95"],"React Hook React.useMemo has a missing dependency: 'testColumns'. Either include it or remove the dependency array.",["96"],"'React' is defined but never used.","'useState' is defined but never used.","'Children' is assigned a value but never used.","'ColumnCalcsModule' is assigned a value but never used.","'finalTestArray' is assigned a value but never used.",{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},"Update the dependencies array to be: [rowData]",{"range":"101","text":"102"},"Update the dependencies array to be: [testColumns]",{"range":"103","text":"104"},[3574,3576],"[rowData]",[3972,3974],"[testColumns]"]