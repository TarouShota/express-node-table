[{"D:\\move-forward\\react-ukol\\frontend\\src\\index.js":"1","D:\\move-forward\\react-ukol\\frontend\\src\\App.js":"2","D:\\move-forward\\react-ukol\\frontend\\src\\reportWebVitals.js":"3","D:\\move-forward\\react-ukol\\frontend\\src\\components\\tabulator.js":"4","D:\\move-forward\\react-ukol\\frontend\\src\\jstable.js":"5","D:\\move-forward\\react-ukol\\frontend\\src\\components\\react-table.js":"6","D:\\move-forward\\react-ukol\\frontend\\src\\testScript.js":"7"},{"size":776,"mtime":1650873731341,"results":"8","hashOfConfig":"9"},{"size":770,"mtime":1650873725467,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1650481588583,"results":"11","hashOfConfig":"9"},{"size":3029,"mtime":1650563220269,"results":"12","hashOfConfig":"9"},{"size":4596,"mtime":1651074645305,"results":"13","hashOfConfig":"9"},{"size":14595,"mtime":1651078026364,"results":"14","hashOfConfig":"9"},{"size":5368,"mtime":1650874493095,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"20"},"odctjp",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"20"},"D:\\move-forward\\react-ukol\\frontend\\src\\index.js",["43","44","45"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Home from './components/tabulator';\nimport { ReadCsv } from './jstable';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport { ReactTable } from './components/react-table';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nroot.render(\n  <>\n    {/* <App /> */}\n    <ReadCsv />\n    {/* <ReactTable /> */}\n    {/* <Home /> */}\n  </>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",[],"D:\\move-forward\\react-ukol\\frontend\\src\\App.js",["46","47","48","49"],[],"import logo from './logo.svg';\nimport './index.css';\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nfunction App() {\n\n  useEffect(() => {\n    fetchItems();\n  }, []);\n\n  const [items, setItems] = useState([]);\n\n  const fetchItems = async () => {\n    fetch(\"/api/tweets\").then(async response => {\n      let data = await response.json()\n      console.log(data);\n      setItems(data);\n    })\n\n    // setItems(data);\n  };\n  if (items.length != 0) {\n    console.log(items.employees['employee'][0]);\n  }\n\n\n\n  return (\n    <section>\n      {items.length !== 0 && <h2>{Object.values(items.employees['employee'][0])}</h2>\n      }\n\n    </section >\n  );\n\n}\n\nexport default App;\n","D:\\move-forward\\react-ukol\\frontend\\src\\reportWebVitals.js",[],[],"D:\\move-forward\\react-ukol\\frontend\\src\\components\\tabulator.js",[],[],"D:\\move-forward\\react-ukol\\frontend\\src\\jstable.js",["50","51","52","53","54","55","56"],[],"import React, { useEffect, useState } from 'react';\r\n\r\n// import './App.css'\r\nimport 'react-tabulator/lib/styles.css';\r\nimport { ReactTabulator } from 'react-tabulator'\r\nimport { Tabulator } from 'tabulator-tables';\r\nimport { ReactTable } from './components/react-table';\r\nimport { useTable } from 'react-table'\r\n\r\nrequire('react-dom');\r\nwindow.React2 = require('react');\r\nconsole.log(window.React1 === window.React2);\r\nexport function ReadCsv() {\r\n    const [tableRows, setTableRows] = useState([]);\r\n\r\n    //State to store the values\r\n    const [values, setValues] = useState([]);\r\n\r\n\r\n\r\n    let file = null;\r\n    function fileInput(e) {\r\n        file = e.target.files[0]\r\n        // console.log(e.target.files[0]);\r\n    }\r\n    function submitFile() {\r\n\r\n        let formData = new FormData()\r\n        formData.append('file', file);\r\n\r\n        const fetchItems = async () => fetch(\"/api/tweets\", {\r\n            // mode: 'no-cors',\r\n            method: 'POST',\r\n            body: formData\r\n        })\r\n            .then((response) => response.json())\r\n            .then(({ data }) => {\r\n                if (data.length) {\r\n                    // data.forEach((element, index) => {\r\n                    //     if (index == 0) {\r\n                    //         return\r\n                    //     } console.log(element);\r\n                    // })\r\n                  \r\n                    data[0].push(\"jine\");\r\n\r\n                    data.forEach((element, index) => {\r\n                        if (index == 0) {\r\n                            return\r\n                        }\r\n                        element.push(\"0\")\r\n                    })\r\n                    console.log(data[1], data);\r\n                    \r\n                    \r\n                    let allArrays = data.slice(1, data.length);\r\n\r\n                    setTableRows(data[0]);\r\n                    setValues(allArrays);\r\n\r\n                    console.log(tableRows);\r\n                    console.log(values)\r\n                    window.columns = data[0]\r\n                    /* Converting the array of arrays into an array of objects. */\r\n                    window.rows = data.splice(1).map((arr) => {\r\n\r\n                        const obj = {}\r\n                        window.columns.forEach((column, index) => {\r\n                            obj[column] = arr[index]\r\n                        })\r\n                        return obj\r\n                    })\r\n\r\n                    /* Adding a new property to each object in the array. */\r\n                    window.rows.forEach(element => {\r\n                        element.jine = \"0\"\r\n                    });\r\n                    console.log(window.rows);\r\n\r\n                } else {\r\n                    alert('The CSV is empty')\r\n                }\r\n            })\r\n            .catch((e) => alert(e.message))\r\n        fetchItems()\r\n\r\n\r\n    }\r\n  function CreateTable() {\r\n        return (\r\n            <table className='table table-bordered table-dark'>\r\n                <thead>\r\n                    <tr>\r\n                        {tableRows.map((rows, index) => {\r\n                            return <th key={index}>{rows}</th>;\r\n                        })}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {values.map((value, index) => {\r\n                        return (\r\n                            <tr key={index}>\r\n                                {value.map((val, i) => {\r\n                                    return <td  key={i}>{val}</td>;\r\n                                })}\r\n\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"container py-4\">\r\n            <h1>Nahrát CSV</h1>\r\n            <label htmlFor='file'>Vyberte file</label>\r\n            <input type='file' className=\"form-control\" name='file' id='file' onChange={fileInput} />\r\n            <button className=\"btn btn primary mt-2\" id=\"submitFile\" onClick={submitFile}>Přečíst</button>\r\n            {/* <div className=\"mt-2\" id=\"csvTable\"></div> */}\r\n            {(window.rows != undefined && window.columns) &&\r\n                <ReactTable jsonArray={values} />\r\n            }\r\n\r\n            {/* <h1>{tableRows} and {values}</h1> */}\r\n            {/* <CreateTable /> */}\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n    // const data = require(\"./data\");\r\n\r\n\r\n  \r\n\r\n    // function tableClick(e) {\r\n    //     console.log(e)\r\n    //     console.log(e.target.innerText)\r\n    //     console.log()\r\n    // }\r\n\r\n","D:\\move-forward\\react-ukol\\frontend\\src\\components\\react-table.js",["57","58","59","60","61","62","63","64","65","66","67"],[],"import React, { cloneElement, useEffect, useState } from 'react';\r\nimport { useTable } from \"react-table\";\r\nimport { objectConverter, calculateHours } from '../testScript';\r\nimport '../index.css';\r\n\r\n\r\n\r\n\r\nconst borderStyle = {\r\n\r\n};\r\nconst activeCell = {\r\n    backgroundColor: '#16DB65'\r\n}\r\n\r\nexport function ReactTable(jsonArray) {\r\n\r\n    // console.log(window.rows)\r\n    let rowData = window.rows\r\n    let columnData = window.columns\r\n    let jsonStateArray = jsonArray.jsonArray\r\n    let convertedArray = objectConverter(jsonStateArray);\r\n    // console.log(jsonStateArray);\r\n\r\n    // console.log(arrayToSend);\r\n    // console.log(rowData)\r\n    // console.log(window.dataCopy)\r\n\r\n\r\n    // console.log(jineObject)\r\n\r\n    const [cellData, setCellData] = useState(convertedArray);\r\n\r\n    const [hourlyRate, setHourlyRate] = useState(0)\r\n\r\n    const [totalHours, setTotalHours] = useState(0)\r\n\r\n    let finalJson = [];\r\n\r\n    let jineObject = {}\r\n    for (const key in convertedArray) {\r\n        jineObject[key] = 0;\r\n\r\n    }\r\n    const [value, setValue] = useState(jineObject);\r\n\r\n    /**\r\n     * `const onChange = (e, name) => setValue({...value, [name]: e.target.value})`\r\n     * @param e - the event object\r\n     * @param name - The name of the field.\r\n     */\r\n    const onChange = (e, name) => {\r\n        console.log(e)\r\n        const changeJine = () => setValue({\r\n            ...value,\r\n            [name]: e.target.value\r\n        })\r\n        changeJine()\r\n\r\n\r\n    };\r\n    const rateChange = (e) => {\r\n        setHourlyRate(e.target.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        console.log(value)\r\n    }, [])\r\n\r\n    // console.log(columnData)\r\n    // console.log(jsonRows.jsonRows);\r\n    // console.log(jsonRows.jsonColumns)\r\n    //e.target.value\r\n\r\n    useEffect(() => {\r\n        console.log(cellData);\r\n\r\n    }, [cellData])\r\n\r\n\r\n\r\n    // const onBlur = (name, columnIndex) => {\r\n\r\n    //     updateMyData(name, columnIndex, value);\r\n    // };\r\n\r\n    /**\r\n     * It takes a name and a columnIndex as arguments, and then updates the value of the cellData\r\n     * object at the location specified by the name and columnIndex arguments.\r\n     * @param name - the name of the cell\r\n     * @param columnIndex - the index of the column that was clicked\r\n     */\r\n    const updateMyData = (name, columnIndex) => {\r\n\r\n        const togleState = () => setCellData({\r\n            ...cellData,\r\n            [name]: {\r\n                ...cellData[name],\r\n                [columnIndex]: {\r\n                    ...cellData[name][columnIndex],\r\n                    value: value[name]\r\n\r\n\r\n\r\n                }\r\n            }\r\n        })\r\n        togleState()\r\n    }\r\n\r\n    /**\r\n     * It toggles the state of the clicked property of the object in the cellData array.\r\n     * @param name - the name of the row\r\n     * @param columnIndex - the index of the column that was clicked\r\n     */\r\n    function MudaObject(name, columnIndex) {\r\n\r\n        function stateToggle() {\r\n            return !cellData[name][columnIndex].clicked\r\n        }\r\n\r\n        const togleState = () => setCellData({\r\n            ...cellData,\r\n            [name]: {\r\n                ...cellData[name],\r\n                [columnIndex]: {\r\n                    ...cellData[name][columnIndex],\r\n                    clicked: stateToggle()\r\n                }\r\n            }\r\n        })\r\n        togleState()\r\n    }\r\n    // const newData = [];\r\n    // origData.forEach((actorObj) => {\r\n    //     actorObj.movies.forEach((movie) => {\r\n    //         newData.push({\r\n    //             [\"actor\"]: actorObj.actor,\r\n    //             movie: movie.namel\r\n    //         });\r\n    //     });\r\n    // });\r\n    /* A function that is called when the user clicks on a cell. It is supposed to change the value of the\r\n    cell. */\r\n    // const togleState = () => setCellData({\r\n    //     ...cellData,\r\n    //     [name]: {\r\n    //         ...cellData[name],\r\n    //         [columnIndex]: {\r\n    //             ...cellData[name][columnIndex],\r\n    //             value: e.target.value\r\n    //         }\r\n    //     }\r\n    // })\r\n    // togleState()\r\n\r\n\r\n\r\n    let data = React.useMemo(() => rowData, []);\r\n\r\n    // console.log(data);\r\n\r\n    const testJson = ['nazev', 'trivialni', 'grafika', 'pokrocile', 'jine']\r\n\r\n    /* Creating an array of objects. */\r\n    let testColumns = []\r\n\r\n    columnData.forEach((element, index) => {\r\n        let testObj = {\r\n            Header: element,\r\n            accessor: element,\r\n            id: index\r\n        }\r\n        testColumns.push(testObj)\r\n    });\r\n\r\n    // console.log(testColumns)\r\n\r\n    let columns = React.useMemo(\r\n        () => testColumns,\r\n        []\r\n    );\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow\r\n    } = useTable({ columns, data });\r\n\r\n    // function read(e, index, row) {\r\n    //     console.log(e);\r\n    // }\r\n\r\n    /**\r\n     * It returns a React element.\r\n     * @returns The function FinalButton is being returned.\r\n     */\r\n    function FinalButton() {\r\n        return (\r\n            <>\r\n                <h4 style={{ marginTop: '2rem' }}>Celkový počet hodin {totalHours}</h4>\r\n                <h4 >Celková částka - {totalHours * hourlyRate}</h4>\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * It takes an array of objects, adds a new property to each object, and then adds a new object to the\r\n     * end of the array.\r\n     * \r\n     * The new property is called \"součet\" and it's value is the product of two other properties in the\r\n     * object.\r\n     * \r\n     * The new object is called \"celkem\" and it's value is the sum of all the \"hodiny\" properties in the\r\n     * array.\r\n     * \r\n     * The function also sets a global variable called \"totalHours\" to the value of the \"celkem\" property.\r\n     * \r\n     * The function also sets a global variable called \"lastData\" to the array of objects.\r\n     * \r\n     * The function also calls a function called \"submitFile\" and passes it the array of objects.\r\n     * \r\n     * The function also calls a function called \"setTotalHours\" and passes it the value of the \"celkem\"\r\n     * property.\r\n     * @param e - the event object\r\n     */\r\n    function createLastData(e) {\r\n        let lastData = calculateHours(cellData)\r\n        let totalSum = 0\r\n        lastData.forEach(element => {\r\n\r\n            totalSum += element.hodiny\r\n            element['součet'] = element.hodiny * hourlyRate\r\n        });\r\n\r\n        lastData[lastData.length] = { nazev: 'celkem', hodiny: totalSum, součet: totalSum * hourlyRate }\r\n        // console.log(lastData)\r\n        window.lastData = lastData\r\n        console.log(window.lastData)\r\n        setTotalHours(totalSum)\r\n        //console.log(window.jsonToCsvData)\r\n        // submitFile(jsonToCsvData)\r\n\r\n    }\r\n\r\n    /**\r\n     * It takes an array of objects and returns a string of the objects in CSV format.\r\n     * @param objArray - The array of objects that you want to convert to CSV.\r\n     * @returns A string of the data in the format of a CSV file.\r\n     */\r\n\r\n    function convertToCSV(objArray) {\r\n\r\n        var array = typeof objArray != \"object\" ? JSON.parse(objArray) : objArray;\r\n        var str = \"\";\r\n        // console.log(array)\r\n\r\n        for (var i = 0; i < array.length; i++) {\r\n            var line = \"\";\r\n            for (var index in array[i]) {\r\n                if (line != \"\") line += \";\";\r\n\r\n                line += array[i][index];\r\n            }\r\n\r\n            str += line + \"\\r\\n\";\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n    /**\r\n     * It takes an array of objects, converts it to a CSV string, and then downloads the CSV file.\r\n     * @param headers - An array of strings that will be used as the headers in the CSV file.\r\n     * @param items - The array of objects that you want to export.\r\n     * @param fileTitle - The title of the file you want to export.\r\n     */\r\n    function exportCSVFile(headers, items, fileTitle) {\r\n\r\n        if (headers) {\r\n            items.unshift(headers);\r\n        }\r\n\r\n        // Convert Object to JSON\r\n        var jsonObject = JSON.stringify(items);\r\n\r\n        var csv = convertToCSV(jsonObject);\r\n\r\n        var exportedFilenmae = fileTitle + \".csv\" || \"export.csv\";\r\n\r\n        var blob = new Blob([csv], { type: \"text/csv;charset=utf-8;\" });\r\n        if (navigator.msSaveBlob) {\r\n            // IE 10+\r\n            navigator.msSaveBlob(blob, exportedFilenmae);\r\n        } else {\r\n            var link = document.createElement(\"a\");\r\n            if (link.download !== undefined) {\r\n                // feature detection\r\n                // Browsers that support HTML5 download attribute\r\n                var url = URL.createObjectURL(blob);\r\n                link.setAttribute(\"href\", url);\r\n                link.setAttribute(\"download\", exportedFilenmae);\r\n                link.style.visibility = \"hidden\";\r\n                document.body.appendChild(link);\r\n                link.click();\r\n                document.body.removeChild(link);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /* Creating an object with three properties. */\r\n    let headers = {\r\n        nazev: \"nazev\".replace(/,/g, \"\"), // remove commas to avoid errors\r\n        hodiny: \"hodiny\",\r\n        součet: \"součet\",\r\n    };\r\n\r\n\r\n\r\n    // var fileTitle = \"perfektniSplnil\"; // or 'my-unique-title'\r\n\r\n    //exportCSVFile(headers, itemsFormatted, fileTitle);\r\n\r\n\r\n    return (\r\n        <>\r\n            {/* <h1>Zap</h1> */}\r\n            <table {...getTableProps()} className='table table-bordered table-dark '>\r\n                <thead>\r\n                    {headerGroups.map((headerGroup) => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map((column) => (\r\n                                <th {...column.getHeaderProps()} >\r\n                                    {column.render(\"Header\")}\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map((row, i) => {\r\n                        prepareRow(row);\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map((cell, j) => {\r\n                                    if (cell.column.Header == testColumns[0].Header) {\r\n\r\n\r\n                                        return (\r\n                                            <td\r\n                                                rowSpan={cell.rowSpan}\r\n\r\n                                                {...cell.getCellProps()}\r\n\r\n                                            >\r\n                                                {cell.render(\"Cell\")}\r\n                                            </td>\r\n                                        );\r\n                                    }\r\n\r\n                                    if (cell.column.Header == 'jine') {\r\n                                        return (\r\n                                            <td\r\n                                                rowSpan={cell.rowSpan}\r\n                                                // onClick={() =>\r\n                                                //     MudaObject(row.cells[0].value, cell.column.id)\r\n                                                // }\r\n                                                {...cell.getCellProps()}\r\n                                                style={activeCell}\r\n                                            ><input style={{ width: '4rem' }}\r\n                                                value={value[row.cells[0].value]}\r\n                                                onChange={(e) => onChange(e, row.cells[0].value)\r\n                                                }\r\n\r\n                                                onBlur={() =>\r\n                                                    updateMyData(row.cells[0].value, cell.column.id)\r\n                                                }\r\n                                            >\r\n                                                </input>\r\n                                                {/* {cell.render(\"Cell\")} */}\r\n                                            </td>\r\n                                        );\r\n\r\n                                    }\r\n                                    if (cellData[row.cells[0].value][cell.column.id].clicked == true) {\r\n\r\n                                    }\r\n                                    // console.log(cell.column.id, row.cells[0].value)\r\n                                    // console.log(cell.column.Header)\r\n                                    return (\r\n                                        <td\r\n                                            rowSpan={cell.rowSpan}\r\n\r\n                                            onClick={() =>\r\n                                                MudaObject(row.cells[0].value, cell.column.id)\r\n                                            }\r\n                                            {...cell.getCellProps()}\r\n                                            style={(cellData[row.cells[0].value][cell.column.id].clicked) ? activeCell : borderStyle\r\n                                            }\r\n                                        >\r\n                                            {/* border: \"3px solid #3D348B\", backgroundColor: 'white', color: 'black', cursor: 'pointer' */}\r\n                                            {cell.render(\"Cell\")}\r\n                                        </td>\r\n                                    );\r\n                                })}\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table >\r\n            <br />\r\n            <input style={{ marginBottom: '2rem' }} className='form-control' value={hourlyRate} onChange={(e) => setHourlyRate(e.target.value)} placeholder='hodinova sazba'></input>\r\n\r\n            <button className='btn btn-success' onClick={createLastData}> Vypočíst</button>\r\n            {/* <button onClick={(e) => createLastData(e)}>\r\n                vypočíst</button> */}\r\n\r\n            <br />\r\n            <p style={{ marginTop: '0.5rem', opacity: 0.8 }}>export only after clicking 'vypočíst'</p>\r\n\r\n            <FinalButton />\r\n            <button type='button' className='btn btn-dark' onClick={() => exportCSVFile(headers, window.lastData, 'perfektniFile')} style={{ marginTop: '2rem' }}>Export csv</button>\r\n\r\n        </>\r\n    );\r\n}","D:\\move-forward\\react-ukol\\frontend\\src\\testScript.js",["68","69","70","71","72","73","74","75"],[],"import React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nconst { Children } = require(\"react\");\r\nconst { ColumnCalcsModule } = require(\"tabulator-tables\");\r\n\r\n// // import './App.css'\r\n// import 'react-tabulator/lib/styles.css';\r\n// import { ReactTabulator } from 'react-tabulator'\r\n// import { Tabulator } from 'tabulator-tables';\r\n// function submitFile() {\r\n\r\n//     let formData = new FormData()\r\n//     formData.append('file', file);\r\n\r\n//     const fetchItems = async () => fetch(\"/api/tweets\", {\r\n//         // mode: 'no-cors',\r\n//         method: 'POST',\r\n//         body: formData\r\n//     })\r\n//         .then((response) => response.json())\r\n//         .then(({ data }) => {\r\n//             if (data.length) {\r\n//                 return data\r\n//                 console.log(data[1], data);\r\n//                 data[0].push(\"jine\");\r\n\r\n//                 data.forEach((element, index) => {\r\n//                     if (index == 0) {\r\n//                         return\r\n//                     }\r\n//                     element.push(\"0\")\r\n//                 })\r\n\r\n//                 let allArrays = data.slice(1, data.length);\r\n\r\n//                 setTableRows(data[0]);\r\n//                 setValues(allArrays);\r\n\r\n//                 console.log(tableRows);\r\n//                 console.log(values)\r\n//                 const columns = data[0]\r\n//                 /* Converting the array of arrays into an array of objects. */\r\n//                 rows = data.splice(1).map((arr) => {\r\n\r\n//                     const stateObject = {}\r\n//                     columns.forEach((column, index) => {\r\n//                         stateObject[column] = arr[index]\r\n//                     })\r\n//                     return stateObject\r\n//                 })\r\n\r\n//                 /* Adding a new property to each object in the array. */\r\n//                 rows.forEach(element => {\r\n//                     element.jine = \"0\"\r\n//                 });\r\n//                 console.log(rows);\r\n\r\n//                 // console.log(rows, columns)\r\n\r\n//                 const table = new Tabulator(\"#csvTable\", {\r\n//                     height: \"300px\",\r\n//                     data: rows,\r\n//                     autoColumns: true\r\n//                 });\r\n//             } else {\r\n//                 alert('The CSV is empty')\r\n//             }\r\n//         })\r\n//         .catch((e) => alert(e.message))\r\n//     return fetchItems()\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet testArray = [[\"first\", \"1\", \"5\", \"10\", \"0\"], [\"second\", \"3\", \"7\", \"12\", \"0\"], [\"third\", \"5\", \"9\", \"14\", \"0\"], [\"fourth\", \"4\", \"8\", \"13\", \"0\"]]\r\n//'second', \"3\", \"7\", \"12\",\"0\"\r\n// , [\"third\", \"5\", \"9\", \"14\",\"0\"]\r\n\r\nlet childObj = {}\r\n\r\n//export the func\r\n/**\r\n * It takes an array of arrays and returns an object with the first element of each array as the key\r\n * and the rest of the elements as the value.\r\n * @param jsonArray - [[\"1\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\r\n * \"0\", \"0\", \"0\", \"0\r\n * @returns {\r\n *     \"1\": {\r\n *         \"1\": {\r\n *             \"clicked\": true,\r\n *             \"value\": \"0\"\r\n *         },\r\n *         \"2\": {\r\n *             \"clicked\": false,\r\n *             \"value\": \"1\"\r\n *         },\r\n *         \"3\": {\r\n *             \"\r\n */\r\nexport function objectConverter(jsonArray) {\r\n    if (jsonArray == undefined) {\r\n        return\r\n    }\r\n\r\n    let stateObject = {}\r\n    jsonArray.forEach((element, index) => {\r\n        // console.log(element[0])\r\n        // console.log(element[index]);\r\n\r\n\r\n        // console.log(stateObject[`${element[index]}`])\r\n        element.forEach((e, childIndex) => {\r\n            if (childIndex === 0) {\r\n                return stateObject[`${element[0]}`] = {}\r\n            }\r\n            if (e == \"0\") {\r\n                Object.assign(childObj, {\r\n                    [childIndex]: {\r\n                        clicked: true,\r\n                        value: e\r\n\r\n                    }\r\n                })\r\n            } else {\r\n                Object.assign(childObj, {\r\n                    [childIndex]: {\r\n                        clicked: false,//make it false\r\n                        value: e\r\n\r\n                    }\r\n                })\r\n            }\r\n\r\n            // console.log(e);\r\n\r\n        });\r\n        Object.assign(stateObject[`${element[0]}`], childObj);\r\n\r\n    });\r\n    return stateObject\r\n}\r\n\r\nlet finalTestArray = (objectConverter(testArray))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * It takes an object with a bunch of nested objects, and returns an array of objects with the same\r\n * keys as the nested objects, but with the value of the nested objects added together.\r\n * @param testingObject - {\r\n * @returns An array of objects.\r\n */\r\nexport function calculateHours(testingObject) {\r\n    let finalJson = [];\r\n    for (const key in testingObject) {\r\n        let finalObj = {}\r\n        finalObj['nazev'] = key\r\n        finalObj['hodiny'] = 0\r\n        // key\r\n        for (const childKey in testingObject[`${key}`]) {\r\n\r\n\r\n            if (testingObject[`${key}`][`${childKey}`].clicked) {\r\n                finalObj['hodiny'] += parseInt(testingObject[`${key}`][`${childKey}`].value)\r\n\r\n                // finalObj['first'] = testingObject['1'].value\r\n            }\r\n\r\n        }\r\n        finalJson.push(finalObj)\r\n\r\n        // console.log(finalJson)\r\n    }\r\n\r\n    return finalJson\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",{"ruleId":"76","severity":1,"message":"77","line":4,"column":8,"nodeType":"78","messageId":"79","endLine":4,"endColumn":11},{"ruleId":"76","severity":1,"message":"80","line":6,"column":8,"nodeType":"78","messageId":"79","endLine":6,"endColumn":12},{"ruleId":"76","severity":1,"message":"81","line":10,"column":10,"nodeType":"78","messageId":"79","endLine":10,"endColumn":20},{"ruleId":"76","severity":1,"message":"82","line":1,"column":8,"nodeType":"78","messageId":"79","endLine":1,"endColumn":12},{"ruleId":"76","severity":1,"message":"83","line":4,"column":10,"nodeType":"78","messageId":"79","endLine":4,"endColumn":14},{"ruleId":"76","severity":1,"message":"84","line":5,"column":27,"nodeType":"78","messageId":"79","endLine":5,"endColumn":33},{"ruleId":"85","severity":1,"message":"86","line":24,"column":20,"nodeType":"87","messageId":"88","endLine":24,"endColumn":22},{"ruleId":"76","severity":1,"message":"89","line":1,"column":17,"nodeType":"78","messageId":"79","endLine":1,"endColumn":26},{"ruleId":"76","severity":1,"message":"90","line":5,"column":10,"nodeType":"78","messageId":"79","endLine":5,"endColumn":24},{"ruleId":"76","severity":1,"message":"91","line":6,"column":10,"nodeType":"78","messageId":"79","endLine":6,"endColumn":19},{"ruleId":"76","severity":1,"message":"92","line":8,"column":10,"nodeType":"78","messageId":"79","endLine":8,"endColumn":18},{"ruleId":"85","severity":1,"message":"93","line":48,"column":35,"nodeType":"87","messageId":"88","endLine":48,"endColumn":37},{"ruleId":"76","severity":1,"message":"94","line":89,"column":12,"nodeType":"78","messageId":"79","endLine":89,"endColumn":23},{"ruleId":"85","severity":1,"message":"86","line":126,"column":27,"nodeType":"87","messageId":"88","endLine":126,"endColumn":29},{"ruleId":"76","severity":1,"message":"95","line":1,"column":17,"nodeType":"78","messageId":"79","endLine":1,"endColumn":29},{"ruleId":"76","severity":1,"message":"96","line":38,"column":9,"nodeType":"78","messageId":"79","endLine":38,"endColumn":18},{"ruleId":"76","severity":1,"message":"97","line":62,"column":11,"nodeType":"78","messageId":"79","endLine":62,"endColumn":21},{"ruleId":"98","severity":1,"message":"99","line":69,"column":8,"nodeType":"100","endLine":69,"endColumn":10,"suggestions":"101"},{"ruleId":"98","severity":1,"message":"102","line":160,"column":45,"nodeType":"100","endLine":160,"endColumn":47,"suggestions":"103"},{"ruleId":"76","severity":1,"message":"104","line":164,"column":11,"nodeType":"78","messageId":"79","endLine":164,"endColumn":19},{"ruleId":"98","severity":1,"message":"105","line":182,"column":9,"nodeType":"100","endLine":182,"endColumn":11,"suggestions":"106"},{"ruleId":"85","severity":1,"message":"86","line":265,"column":26,"nodeType":"87","messageId":"88","endLine":265,"endColumn":28},{"ruleId":"85","severity":1,"message":"93","line":351,"column":60,"nodeType":"87","messageId":"88","endLine":351,"endColumn":62},{"ruleId":"85","severity":1,"message":"93","line":366,"column":60,"nodeType":"87","messageId":"88","endLine":366,"endColumn":62},{"ruleId":"85","severity":1,"message":"93","line":390,"column":94,"nodeType":"87","messageId":"88","endLine":390,"endColumn":96},{"ruleId":"76","severity":1,"message":"107","line":1,"column":8,"nodeType":"78","messageId":"79","endLine":1,"endColumn":13},{"ruleId":"76","severity":1,"message":"89","line":1,"column":17,"nodeType":"78","messageId":"79","endLine":1,"endColumn":26},{"ruleId":"76","severity":1,"message":"108","line":1,"column":28,"nodeType":"78","messageId":"79","endLine":1,"endColumn":36},{"ruleId":"76","severity":1,"message":"109","line":5,"column":9,"nodeType":"78","messageId":"79","endLine":5,"endColumn":17},{"ruleId":"76","severity":1,"message":"110","line":6,"column":9,"nodeType":"78","messageId":"79","endLine":6,"endColumn":26},{"ruleId":"85","severity":1,"message":"93","line":107,"column":19,"nodeType":"87","messageId":"88","endLine":107,"endColumn":21},{"ruleId":"85","severity":1,"message":"93","line":122,"column":19,"nodeType":"87","messageId":"88","endLine":122,"endColumn":21},{"ruleId":"76","severity":1,"message":"111","line":149,"column":5,"nodeType":"78","messageId":"79","endLine":149,"endColumn":19},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","'Home' is defined but never used.","'ReactTable' is defined but never used.","'logo' is defined but never used.","'Link' is defined but never used.","'Router' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'ReactTabulator' is defined but never used.","'Tabulator' is defined but never used.","'useTable' is defined but never used.","Expected '===' and instead saw '=='.","'CreateTable' is defined but never used.","'cloneElement' is defined but never used.","'finalJson' is assigned a value but never used.","'rateChange' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array.","ArrayExpression",["112"],"React Hook React.useMemo has a missing dependency: 'rowData'. Either include it or remove the dependency array.",["113"],"'testJson' is assigned a value but never used.","React Hook React.useMemo has a missing dependency: 'testColumns'. Either include it or remove the dependency array.",["114"],"'React' is defined but never used.","'useState' is defined but never used.","'Children' is assigned a value but never used.","'ColumnCalcsModule' is assigned a value but never used.","'finalTestArray' is assigned a value but never used.",{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},"Update the dependencies array to be: [value]",{"range":"121","text":"122"},"Update the dependencies array to be: [rowData]",{"range":"123","text":"124"},"Update the dependencies array to be: [testColumns]",{"range":"125","text":"126"},[1618,1620],"[value]",[4153,4155],"[rowData]",[4656,4658],"[testColumns]"]